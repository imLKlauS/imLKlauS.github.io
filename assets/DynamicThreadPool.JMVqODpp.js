import{_ as l}from"./ValaxyMain.vue_vue_type_style_index_0_lang.Mv_UhvjI.js";import{f as i,a,u as e}from"./chunks/vue-router.CI9JapQr.js";import{O as s,a0 as n,R as t,S as r,W as o,X as h,u as p,P as u,D as g}from"./framework.BHkQnU1p.js";import"./app.CqjTnKby.js";import"./chunks/dayjs.CORIJbU0.js";import"./chunks/vue-i18n.CvY6KzGi.js";import"./chunks/nprogress.BHm3HSQC.js";import"./chunks/pinia.BY9HMtis.js";import"./chunks/@vueuse/motion.CUAOwWQQ.js";import"./YunComment.vue_vue_type_style_index_0_lang.CZPU5fad.js";import"./index.TQnGKZgq.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.De5tC3Nd.js";import"./post.DMENGHQr.js";const d=i("/posts/DynamicThreadPool",(async l=>JSON.parse('{"title":"如何使用线程池不容易出故障","description":"","frontmatter":{"title":"如何使用线程池不容易出故障","author":"imklaus","tags":["线程池","BlockingQueue","ThreadPoolExecutor"],"categories":["Java","微系统与第三方框架"],"date":"2024-03-19 19:03:22","outline":"deep","postTitleClass":"text-#FF8EB3","excerpt_type":"html","end":false},"headers":[{"level":2,"title":"核心功能","slug":"核心功能","link":"#核心功能","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[{"level":3,"title":"1. 动态调参","slug":"_1-动态调参","link":"#_1-动态调参","children":[]},{"level":3,"title":"2. 告警策略","slug":"_2-告警策略","link":"#_2-告警策略","children":[]},{"level":3,"title":"3. 线程池监控","slug":"_3-线程池监控","link":"#_3-线程池监控","children":[]},{"level":3,"title":"4. 框架底层线程池","slug":"_4-框架底层线程池","link":"#_4-框架底层线程池","children":[]}]},{"level":2,"title":"模块介绍","slug":"模块介绍","link":"#模块介绍","children":[]},{"level":2,"title":"深入原理","slug":"深入原理","link":"#深入原理","children":[{"level":3,"title":"1. 配置中心模式变更原理","slug":"_1-配置中心模式变更原理","link":"#_1-配置中心模式变更原理","children":[]},{"level":3,"title":"2. 适配 SpringBoot 1.5 & 2.x","slug":"_2-适配-springboot-1-5-2-x","link":"#_2-适配-springboot-1-5-2-x","children":[]},{"level":3,"title":"3. 阅读源码优点","slug":"_3-阅读源码优点","link":"#_3-阅读源码优点","children":[]}]}],"relativePath":"pages/posts/DynamicThreadPool.md","lastUpdated":null}')),{lazy:(l,i)=>l.name===i.name}),c={__name:"DynamicThreadPool",setup(i,{expose:c}){var m;const{data:k}=d(),y=e(),b=a(),E=Object.assign(b.meta.frontmatter||{},(null==(m=k.value)?void 0:m.frontmatter)||{});b.meta.frontmatter=E,y.currentRoute.value.data=k.value,g("valaxy:frontmatter",E),globalThis.$frontmatter=E;return c({frontmatter:{title:"如何使用线程池不容易出故障",author:"imklaus",tags:["线程池","BlockingQueue","ThreadPoolExecutor"],categories:["Java","微系统与第三方框架"],date:"2024-03-19 19:03:22",outline:"deep",postTitleClass:"text-#FF8EB3",excerpt_type:"html",end:!1}}),(i,a)=>{const e=l;return u(),s(e,{frontmatter:p(E)},{"main-content-md":n((()=>[a[0]||(a[0]=r("p",null,"你是否在项目中使用线程池遇到过以下问题？",-1)),a[1]||(a[1]=r("ul",null,[r("li",null,"创建线程池核心参数不好评估，随着业务流量的波动，极有可能出现生产故障。"),r("li",null,"不支持优雅关闭，当项目关闭时，大量正在运行的线程池任务被丢弃。"),r("li",null,"不支持运行时监控，使用过程中业务无响应，不知道是不是线程池引起。"),r("li",null,"三方框架 RocketMQ、Dubbo 等线程池无法动态修改参数，修改后只能重启应用。")],-1)),o(" more "),a[2]||(a[2]=r("p",null,"在真实业务场景中，线程池可能遇到的问题比这里描述的还要多，稀奇古怪。",-1)),a[3]||(a[3]=r("p",null,"笔者所经历过的项目，因为业务对线程池参数没有合理配置，就触发过几起生产事故。大概在 21 年 6 月份左右，开始在网上搜索动态线程池的项目。",-1)),a[4]||(a[4]=r("p",null,"在开源平台找了挺多动态线程池项目，从功能性以及健壮性而言，个人感觉不满足企业级应用。",-1)),a[5]||(a[5]=r("p",null,"再加上当时看了美团动态线程的文章，就对这个技术方向比较感兴趣，所以决定自己来造一个轻量级的轮子。",-1)),a[6]||(a[6]=r("blockquote",null,[r("p",null,"我觉得写一个偏中间件的框架，还能帮助用户解决实际问题，是一件很酷的事情。")],-1)),a[7]||(a[7]=r("p",null,[h("GitHub："),r("a",{href:"https://github.com/opengoofy/hippo4j",target:"_blank",rel:"noreferrer"},"https://github.com/opengoofy/hippo4j(opens new window)")],-1)),a[8]||(a[8]=r("p",null,[h("Gitee："),r("a",{href:"https://gitee.com/opengoofy/hippo4j",target:"_blank",rel:"noreferrer"},"https://gitee.com/opengoofy/hippo4j(opens new window)")],-1)),a[9]||(a[9]=r("h2",{id:"核心功能",tabindex:"-1"},[h("核心功能 "),r("a",{class:"header-anchor",href:"#核心功能","aria-label":'Permalink to "核心功能"'},"​")],-1)),a[10]||(a[10]=r("p",null,"通过对 JDK 线程池的增强，以及扩展三方框架底层线程池等功能，为业务系统提高线上运行保障能力。",-1)),a[11]||(a[11]=r("p",null,"Hippo4j 框架提供以下功能支持：",-1)),a[12]||(a[12]=r("ol",null,[r("li",null,"客户端应用运行时实时变更指定线程池核心参数，变更生效支持集群和单实例两种方式。"),r("li",null,"线程池运行时异常报警，比如：线程池活跃度、阻塞队列容量水位较高，触发了拒绝策略以及任务运行时间超长等。"),r("li",null,"定时任务（默认5秒）采集线程池运行数据，可上报 Prometheus、InfluxDB 等数据库，搭配 Grafana 做大屏展示。"),r("li",null,"运行过程中支持实时查看线程池当前运行状态以及线程池内线程的堆栈信息。"),r("li",null,"支持 Tomcat、Undertow 和 Jetty 容器线程池运行时查看和动态变更线程池配置。"),r("li",null,"支持 Dubbo、Hystrix、Kafka、RabbitMQ、RocketMQ 等客户端线程池运行时数据查看和动态变更线程池配置。")],-1)),a[13]||(a[13]=r("h2",{id:"应用场景",tabindex:"-1"},[h("应用场景 "),r("a",{class:"header-anchor",href:"#应用场景","aria-label":'Permalink to "应用场景"'},"​")],-1)),a[14]||(a[14]=r("h3",{id:"_1-动态调参",tabindex:"-1"},[h("1. 动态调参 "),r("a",{class:"header-anchor",href:"#_1-动态调参","aria-label":'Permalink to "1. 动态调参"'},"​")],-1)),a[15]||(a[15]=r("p",null,"Google 或者百度搜索线程池和生产事故关键字，几页都放不下，这也间接说明了线程池是个很考验使用者技术功底的技术点。",-1)),a[16]||(a[16]=r("p",null,"那有没有一些技巧或者技术来尽量规避线程池使用上的问题？比如：线程池的配置应该如何选择？",-1)),a[17]||(a[17]=r("figure",null,[r("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20230329231743302.png",alt:"img",loading:"lazy",decoding:"async",class:"lazy"})],-1)),a[18]||(a[18]=r("p",null,"我觉得大家对于线程池参数的纠结点主要有两个，无外乎设置的线程数多了或者少了。",-1)),a[19]||(a[19]=r("ul",null,[r("li",null,"如果预设的线程数或阻塞队列数量少了，当业务量上来，任务都在排队或者执行拒绝策略。"),r("li",null,"如果超量设置线程池的参数，无疑会造成资源浪费。")],-1)),a[20]||(a[20]=r("p",null,"如果要修改运行中应用线程池参数，需要停止线上应用，调整成功后再发布，而这个过程异常的繁琐，如果能在运行中动态调整线程池的参数无疑会提高问题解决效率。",-1)),a[21]||(a[21]=r("figure",null,[r("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20250320014617260.png",alt:"image-20250320014617260",loading:"lazy",decoding:"async",class:"lazy"})],-1)),a[22]||(a[22]=r("p",null,"Hippo4j 提供了应用线程池运行时变更核心参数的功能。而且，如果应用是集群部署，可以选择修改线程池某一实例，或者修改集群全部实例，运行时生效，不需要再重启服务。",-1)),a[23]||(a[23]=r("p",null,"压测时可以使用 Hippo4j 动态调整线程池参数，判断线程池核心参数设置是否合理。对于开发测试来说，如果不满足可以随时调整。",-1)),a[24]||(a[24]=r("figure",null,[r("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20250320014821256.png",alt:"image-20250320014821256",loading:"lazy",decoding:"async",class:"lazy"})],-1)),a[25]||(a[25]=r("h3",{id:"_2-告警策略",tabindex:"-1"},[h("2. 告警策略 "),r("a",{class:"header-anchor",href:"#_2-告警策略","aria-label":'Permalink to "2. 告警策略"'},"​")],-1)),a[26]||(a[26]=r("p",null,"很多时候，线程池出故障的时候，系统已经发生了很严重的损失。有没有一种方式，在使用的线程池即将出现问题，但还算比较可控时，触发相关报警提示给用户，进而规避该问题？",-1)),a[27]||(a[27]=r("p",null,"Hippo4j 基于上述问题思考，集成了四种报警策略：",-1)),a[28]||(a[28]=r("ul",null,[r("li",null,"活跃度：假设阈值设置 80%，线程池最大线程数 10，当线程数达到 8 发起报警。"),r("li",null,"阻塞队列容量：假设阈值设置 80%，阻塞队列容量 100，当容量达到 80 发起报警。"),r("li",null,"触发拒绝策略：当线程池任务触发了拒绝策略时，发起拒绝策略报警。"),r("li",null,"任务运行超时：假设用户设置单个任务正常执行是 1000ms，实际执行超过该时间发起报警。")],-1)),a[29]||(a[29]=r("p",null,"支持钉钉、企业微信和飞书软件通知，下图以线程池任务运行超时报警举例：",-1)),a[30]||(a[30]=r("figure",null,[r("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20250320014910434.png",alt:"image-20250320014910434",loading:"lazy",decoding:"async",class:"lazy"})],-1)),a[31]||(a[31]=r("h3",{id:"_3-线程池监控",tabindex:"-1"},[h("3. 线程池监控 "),r("a",{class:"header-anchor",href:"#_3-线程池监控","aria-label":'Permalink to "3. 线程池监控"'},"​")],-1)),a[32]||(a[32]=r("p",null,"Hippo4j 线程池提供了两种监控方式：线程池运行时数据采集监控以及客户端线程池运行实时状态查看。",-1)),a[33]||(a[33]=r("p",null,"1）线程池核心参数监控。",-1)),a[34]||(a[34]=r("figure",null,[r("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20250320014940650.png",alt:"image-20250320014940650",loading:"lazy",decoding:"async",class:"lazy"})],-1)),a[35]||(a[35]=r("p",null,"2）线程池实例运行时状态。",-1)),a[36]||(a[36]=r("figure",null,[r("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20250320015015485.png",alt:"image-20250320015015485",loading:"lazy",decoding:"async",class:"lazy"})],-1)),a[37]||(a[37]=r("p",null,"线程池运行时数据采集适合应用负责人巡查应用健康状态和排查问题时使用，实时状态适合排查多实例之间的运行数据状态。",-1)),a[38]||(a[38]=r("h3",{id:"_4-框架底层线程池",tabindex:"-1"},[h("4. 框架底层线程池 "),r("a",{class:"header-anchor",href:"#_4-框架底层线程池","aria-label":'Permalink to "4. 框架底层线程池"'},"​")],-1)),a[39]||(a[39]=r("p",null,"上面讲的动态线程池是业务中开发人员手动创建的线程池，比如下面这个：",-1)),a[40]||(a[40]=r("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme"},[r("button",{title:"Copy Code",class:"copy"}),r("span",{class:"lang"},"java"),r("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[r("code",{"v-pre":""},[r("span",{class:"line"},[r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"@"),r("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Bean")]),h("\n"),r("span",{class:"line"},[r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"@"),r("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"DynamicThreadPool")]),h("\n"),r("span",{class:"line"},[r("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"public"),r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ThreadPoolExecutor "),r("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"messageConsumeDynamicExecutor"),r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),h("\n"),r("span",{class:"line"},[r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  String threadPoolId "),r("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),r("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "message-consume"'),r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),h("\n"),r("span",{class:"line"},[r("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"  return"),r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ThreadPoolBuilder."),r("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"builder"),r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),h("\n"),r("span",{class:"line"},[r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),r("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"threadFactory"),r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(threadPoolId)")]),h("\n"),r("span",{class:"line"},[r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),r("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"threadPoolId"),r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(threadPoolId)")]),h("\n"),r("span",{class:"line"},[r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),r("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dynamicPool"),r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),h("\n"),r("span",{class:"line"},[r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),r("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"build"),r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),h("\n"),r("span",{class:"line"},[r("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),r("button",{class:"collapse"})],-1)),a[41]||(a[41]=r("p",null,"而框架线程池指的是某些三方中间件底层使用到的线程池，比如 Dubbo、RocketMQ 等框架，这些底层框架为了增强性能选择使用线程池进行扩展。",-1)),a[42]||(a[42]=r("p",null,"为什么要适配这些中间件框架的线程池？",-1)),a[43]||(a[43]=r("p",null,"相信这是很多小伙伴的疑问。以 Dubbo 举例，当服务高并发调用时，如果 Dubbo 底层线程池没有经过个性化配置，极有可能导致线程池打满，最终导致无法提供服务。",-1)),a[44]||(a[44]=r("p",null,"当遇到这种情况，可以使用 Hippo4j 对 Dubbo 线程池进行核心参数调整，避免生产故障时间持续。",-1)),a[45]||(a[45]=r("p",null,"再举个例子，当 RocketMQ 消息积压时，可能大部分公司的解决方案是添加客户端应用节点。而这种方式虽然可以解决问题，但是问题也很明显，太复杂且资源浪费。完全可以调整 RocketMQ SDK 底层线程池的线程数来达到快速消费的逻辑，有效解决 MQ 消息堆积问题。",-1)),a[46]||(a[46]=r("p",null,"目前 Hippo4j 已支持的三方中间件线程池列表：",-1)),a[47]||(a[47]=r("ul",null,[r("li",null,"Apache Dubbo"),r("li",null,"Alibaba Dubbo"),r("li",null,"Apache Kafka"),r("li",null,"Apache RocketMQ"),r("li",null,"RabbitMQ"),r("li",null,"SpringCloud Stream RocketMQ"),r("li",null,"SpringCloud Hystrix"),r("li",null,"Tomcat"),r("li",null,"Jetty"),r("li",null,"Undertow")],-1)),a[48]||(a[48]=r("p",null,"上述中间件线程池都可以在 Hippo4j 页面上操作核心参数动态变更以及监控功能，如下所示：",-1)),a[49]||(a[49]=r("figure",null,[r("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20250320015038332.png",alt:"image-20250320015038332",loading:"lazy",decoding:"async",class:"lazy"})],-1)),a[50]||(a[50]=r("p",null,"未来 Hippo4j 会支持更多三方框架线程池，如果你有好的想法也可以和我沟通，一起完善中间件框架适配。",-1)),a[51]||(a[51]=r("h2",{id:"模块介绍",tabindex:"-1"},[h("模块介绍 "),r("a",{class:"header-anchor",href:"#模块介绍","aria-label":'Permalink to "模块介绍"'},"​")],-1)),a[52]||(a[52]=r("figure",null,[r("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20250320015105972.png",alt:"image-20250320015105972",loading:"lazy",decoding:"async",class:"lazy"})],-1)),a[53]||(a[53]=r("h2",{id:"深入原理",tabindex:"-1"},[h("深入原理 "),r("a",{class:"header-anchor",href:"#深入原理","aria-label":'Permalink to "深入原理"'},"​")],-1)),a[54]||(a[54]=r("p",null,"如果一上来就下载 Hippo4j 的源码来看，很容易迷失进去。这里给大家画了几张图，帮助大家在阅读源码时，能够抓紧主干分支，更快上手 Hippo4j 框架源码。",-1)),a[55]||(a[55]=r("h3",{id:"_1-配置中心模式变更原理",tabindex:"-1"},[h("1. 配置中心模式变更原理 "),r("a",{class:"header-anchor",href:"#_1-配置中心模式变更原理","aria-label":'Permalink to "1. 配置中心模式变更原理"'},"​")],-1)),a[56]||(a[56]=r("figure",null,[r("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20250320015122815.png",alt:"image-20250320015122815",loading:"lazy",decoding:"async",class:"lazy"})],-1)),a[57]||(a[57]=r("h3",{id:"_2-适配-springboot-1-5-2-x",tabindex:"-1"},[h("2. 适配 SpringBoot 1.5 & 2.x "),r("a",{class:"header-anchor",href:"#_2-适配-springboot-1-5-2-x","aria-label":'Permalink to "2. 适配 SpringBoot 1.5 & 2.x"'},"​")],-1)),a[58]||(a[58]=r("figure",null,[r("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20250320015143941.png",alt:"image-20250320015143941",loading:"lazy",decoding:"async",class:"lazy"})],-1)),a[59]||(a[59]=r("h3",{id:"_3-阅读源码优点",tabindex:"-1"},[h("3. 阅读源码优点 "),r("a",{class:"header-anchor",href:"#_3-阅读源码优点","aria-label":'Permalink to "3. 阅读源码优点"'},"​")],-1)),a[60]||(a[60]=r("p",null,"如果您公司没有使用 Hippo4j 场景的话，我也建议去阅读下项目的底层原理，主要有以下几个原因：",-1)),a[61]||(a[61]=r("ul",null,[r("li",null,"为了提高代码质量以及后续的扩展行为，运用多种设计模式实现高内聚、低耦合。"),r("li",null,"框架底层依赖 Spring 框架运行，并在源码中大量使用 Spring 相关功能。"),r("li",null,"运用 JUC 并发包下多种工具保障多线程运行安全，通过实际场景理解并发编程。"),r("li",null,"借鉴主流开源框架 Nacos、Eureka 实现轻量级配置中心和注册中心功能。"),r("li",null,"自定义 RPC 框架实现，封装 Netty 完成客户端/服务端网络通信优化。"),r("li",null,"通过 CheckStyle、Spotless 等插件规范代码编写，保障高质量代码行为和代码样式。")],-1))])),"main-header":n((()=>[t(i.$slots,"main-header")])),"main-header-after":n((()=>[t(i.$slots,"main-header-after")])),"main-nav":n((()=>[t(i.$slots,"main-nav")])),"main-content-before":n((()=>[t(i.$slots,"main-content-before")])),"main-content":n((()=>[t(i.$slots,"main-content")])),"main-content-after":n((()=>[t(i.$slots,"main-content-after")])),"main-nav-before":n((()=>[t(i.$slots,"main-nav-before")])),"main-nav-after":n((()=>[t(i.$slots,"main-nav-after")])),comment:n((()=>[t(i.$slots,"comment")])),footer:n((()=>[t(i.$slots,"footer")])),aside:n((()=>[t(i.$slots,"aside")])),"aside-custom":n((()=>[t(i.$slots,"aside-custom")])),default:n((()=>[t(i.$slots,"default")])),_:3},8,["frontmatter"])}}};export{c as default,d as usePageData};
