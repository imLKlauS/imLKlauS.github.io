import{_ as l}from"./ValaxyMain.vue_vue_type_style_index_0_lang.e6BHMbt0.js";import{f as i,a as s,u as n}from"./chunks/vue-router.CmhWrXzX.js";import{O as a,a0 as e,R as t,S as h,W as r,X as u,u as o,P as d,D as k}from"./framework.BHkQnU1p.js";import"./app.bAaxCnCZ.js";import"./chunks/dayjs.CORIJbU0.js";import"./chunks/vue-i18n.Be57jicL.js";import"./chunks/nprogress.BHm3HSQC.js";import"./chunks/pinia.BY9HMtis.js";import"./chunks/@vueuse/motion.CUAOwWQQ.js";import"./YunComment.vue_vue_type_style_index_0_lang.CW7nOpbS.js";import"./index.TQnGKZgq.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.De5tC3Nd.js";import"./post.03CgFSjK.js";const p=i("/posts/MySQL_Transaction",(async l=>JSON.parse('{"title":"MySQL - 事务","description":"","frontmatter":{"title":"MySQL - 事务","author":"imklaus","top":117,"tags":["SQL"],"categories":["MySQL","事务篇"],"date":"2025-3-19 00:49:55","outline":"deep","excerpt_type":"html","end":false},"headers":[{"level":3,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":3,"title":"事务管理","slug":"事务管理","link":"#事务管理","children":[]},{"level":3,"title":"隔离级别","slug":"隔离级别","link":"#隔离级别","children":[]},{"level":3,"title":"原子特性","slug":"原子特性","link":"#原子特性","children":[]},{"level":3,"title":"隔离特性","slug":"隔离特性","link":"#隔离特性","children":[]},{"level":3,"title":"持久特性","slug":"持久特性","link":"#持久特性","children":[]},{"level":3,"title":"一致特性","slug":"一致特性","link":"#一致特性","children":[]}],"relativePath":"pages/posts/MySQL_Transaction.md","lastUpdated":null}')),{lazy:(l,i)=>l.name===i.name}),g={__name:"MySQL_Transaction",setup(i,{expose:g}){var c;const{data:E}=p(),F=n(),y=s(),b=Object.assign(y.meta.frontmatter||{},(null==(c=E.value)?void 0:c.frontmatter)||{});y.meta.frontmatter=b,F.currentRoute.value.data=E.value,k("valaxy:frontmatter",b),globalThis.$frontmatter=b;return g({frontmatter:{title:"MySQL - 事务",author:"imklaus",top:117,tags:["SQL"],categories:["MySQL","事务篇"],date:"2025-3-19 00:49:55",outline:"deep",excerpt_type:"html",end:!1}}),(i,s)=>{const n=l;return d(),a(n,{frontmatter:o(b)},{"main-content-md":e((()=>[s[0]||(s[0]=h("h3",{id:"基本介绍",tabindex:"-1"},[u("基本介绍 "),h("a",{class:"header-anchor",href:"#基本介绍","aria-label":'Permalink to "基本介绍"'},"​")],-1)),s[1]||(s[1]=h("p",null,"事务（Transaction）是访问和更新数据库的程序执行单元；事务中可能包含一个或多个 SQL 语句，这些语句要么都执行，要么都不执行，作为一个关系型数据库，MySQL 支持事务。",-1)),s[2]||(s[2]=h("p",null,"单元中的每条 SQL 语句都相互依赖，形成一个整体",-1)),s[3]||(s[3]=h("ul",null,[h("li",null,[h("p",null,"如果某条 SQL 语句执行失败或者出现错误，那么整个单元就会回滚，撤回到事务最初的状态")]),h("li",null,[h("p",null,"如果单元中所有的 SQL 语句都执行成功，则事务就顺利执行")])],-1)),s[4]||(s[4]=h("p",null,"事务的四大特征：ACID",-1)),s[5]||(s[5]=h("ul",null,[h("li",null,"原子性 (atomicity)"),h("li",null,"一致性 (consistency)"),h("li",null,"隔离性 (isolaction)"),h("li",null,"持久性 (durability)")],-1)),s[6]||(s[6]=h("p",null,"事务的几种状态：",-1)),s[7]||(s[7]=h("ul",null,[h("li",null,"活动的（active）：事务对应的数据库操作正在执行中"),h("li",null,"部分提交的（partially committed）：事务的最后一个操作执行完，但是内存还没刷新至磁盘"),h("li",null,"失败的（failed）：当事务处于活动状态或部分提交状态时，如果数据库遇到了错误或刷脏失败，或者用户主动停止当前的事务"),h("li",null,"中止的（aborted）：失败状态的事务回滚完成后的状态"),h("li",null,"提交的（committed）：当处于部分提交状态的事务刷脏成功，就处于提交状态")],-1)),r(" more "),s[8]||(s[8]=h("hr",null,null,-1)),s[9]||(s[9]=h("h3",{id:"事务管理",tabindex:"-1"},[u("事务管理 "),h("a",{class:"header-anchor",href:"#事务管理","aria-label":'Permalink to "事务管理"'},"​")],-1)),s[10]||(s[10]=h("h4",{id:"基本操作",tabindex:"-1"},[u("基本操作 "),h("a",{class:"header-anchor",href:"#基本操作","aria-label":'Permalink to "基本操作"'},"​")],-1)),s[11]||(s[11]=h("p",null,"事务管理的三个步骤",-1)),s[12]||(s[12]=h("ol",null,[h("li",null,[h("p",null,"开启事务：记录回滚点，并通知服务器，将要执行一组操作，要么同时成功、要么同时失败")]),h("li",null,[h("p",null,"执行 SQL 语句：执行具体的一条或多条 SQL 语句")]),h("li",null,[h("p",null,"结束事务（提交|回滚）"),h("ul",null,[h("li",null,"提交：没出现问题，数据进行更新"),h("li",null,"回滚：出现问题，数据恢复到开启事务时的状态")])])],-1)),s[13]||(s[13]=h("p",null,"事务操作：",-1)),s[14]||(s[14]=h("ul",null,[h("li",null,[h("p",null,"显式开启事务"),h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"START"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," TRANSACTION"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," [READ "),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"ONLY"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"READ"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," WRITE"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"WITH"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," CONSISTENT"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," SNAPSHOT]"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"; "),h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"#可以跟一个或多个状态，最后的是一致性读")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"BEGIN"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," [WORK];")])])]),h("button",{class:"collapse"})]),h("p",null,"说明：不填状态默认是读写事务")]),h("li",null,[h("p",null,"回滚事务，用来手动中止事务"),h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"ROLLBACK"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")])])]),h("button",{class:"collapse"})])]),h("li",null,[h("p",null,"提交事务，显示执行是手动提交，MySQL 默认为自动提交"),h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"COMMIT"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")])])]),h("button",{class:"collapse"})])]),h("li",null,[h("p",null,"保存点：在事务的执行过程中设置的还原点，调用 ROLLBACK 时可以指定回滚到哪个点"),h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"SAVEPOINT"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," point_name"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";\t\t\t\t\t\t"),h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"#设置保存点")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"RELEASE"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," point_name"),h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"\t\t\t\t\t\t\t#删除保存点")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"ROLLBACK"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," [WORK] TO [SAVEPOINT] point_name\t"),h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"#回滚至某个保存点，不填默认回滚到事务执行之前的状态")])])]),h("button",{class:"collapse"})])]),h("li",null,[h("p",null,"操作演示"),h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 开启事务")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"START"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," TRANSACTION"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),u("\n"),h("span",{class:"line"}),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 张三给李四转账500元")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 1.张三账户-500")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"UPDATE"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," account"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," SET"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," money=money-500"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," WHERE"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," NAME='张三'"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 2.李四账户+500")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"UPDATE"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," account"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," SET"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," money=money+500"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," WHERE"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," NAME='李四'"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),u("\n"),h("span",{class:"line"}),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 回滚事务"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"出现问题"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"ROLLBACK"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),u("\n"),h("span",{class:"line"}),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 提交事务"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"没出现问题"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"COMMIT"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")])])]),h("button",{class:"collapse"})])])],-1)),s[15]||(s[15]=h("hr",null,null,-1)),s[16]||(s[16]=h("h4",{id:"提交方式",tabindex:"-1"},[u("提交方式 "),h("a",{class:"header-anchor",href:"#提交方式","aria-label":'Permalink to "提交方式"'},"​")],-1)),s[17]||(s[17]=h("p",null,"提交方式的相关语法：",-1)),s[18]||(s[18]=h("ul",null,[h("li",null,[h("p",null,"查看事务提交方式"),h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"SELECT"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," @@AUTOCOMMIT"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";  \t\t"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 会话，1"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 代表自动提交"),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"    0"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 代表手动提交")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"SELECT"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," @@GLOBAL.AUTOCOMMIT"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";\t"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 系统")])])]),h("button",{class:"collapse"})])]),h("li",null,[h("p",null,"修改事务提交方式"),h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"SET"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," @@AUTOCOMMIT=数字"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";\t"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 系统")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"SET"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," AUTOCOMMIT=数字"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";\t\t"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 会话")])])]),h("button",{class:"collapse"})])]),h("li",null,[h("p",null,[h("strong",null,"系统变量的操作"),u("：")]),h("div",{style:{"max-height":"300px"},class:"language-sql vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"sql"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"SET"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," [GLOBAL|SESSION] 变量名 "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," 值;\t\t\t\t\t"),h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"-- 默认是会话")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"SET"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," @@[(GLOBAL|SESSION).]变量名 "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," 值;\t\t\t\t"),h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"-- 默认是系统")])])]),h("button",{class:"collapse"})]),h("div",{style:{"max-height":"300px"},class:"language-sql vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"sql"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"SHOW [GLOBAL|SESSION] VARIABLES [LIKE '变量%'];\t  "),h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"-- 默认查看会话内系统变量值")])])]),h("button",{class:"collapse"})])])],-1)),s[19]||(s[19]=h("p",null,"工作原理：",-1)),s[20]||(s[20]=h("ul",null,[h("li",null,[u("自动提交：如果没有 START TRANSACTION 显式地开始一个事务，那么"),h("strong",null,"每条 SQL 语句都会被当做一个事务执行提交操作"),u("；显式开启事务后，会在本次事务结束（提交或回滚）前暂时关闭自动提交")]),h("li",null,"手动提交：不需要显式的开启事务，所有的 SQL 语句都在一个事务中，直到执行了提交或回滚，然后进入下一个事务"),h("li",null,[u("隐式提交：存在一些特殊的命令，在事务中执行了这些命令会马上"),h("strong",null,"强制执行 COMMIT 提交事务"),h("ul",null,[h("li",null,[h("strong",null,"DDL 语句"),u(" (CREATE/DROP/ALTER)、LOCK TABLES 语句、LOAD DATA 导入数据语句、主从复制语句等")]),h("li",null,"当一个事务还没提交或回滚，显式的开启一个事务会隐式的提交上一个事务")])])],-1)),s[21]||(s[21]=h("hr",null,null,-1)),s[22]||(s[22]=h("h4",{id:"事务-id",tabindex:"-1"},[u("事务 ID "),h("a",{class:"header-anchor",href:"#事务-id","aria-label":'Permalink to "事务 ID"'},"​")],-1)),s[23]||(s[23]=h("p",null,[u("事务在执行过程中对某个表执行了"),h("strong",null,"增删改操作或者创建表"),u("，就会为当前事务分配一个独一无二的事务 ID（对临时表并不会分配 ID），如果当前事务没有被分配 ID，默认是 0")],-1)),s[24]||(s[24]=h("p",null,"说明：只读事务不能对普通的表进行增删改操作，但是可以对临时表增删改，读写事务可以对数据表执行增删改查操作",-1)),s[25]||(s[25]=h("p",null,"事务 ID 本质上就是一个数字，服务器在内存中维护一个全局变量：",-1)),s[26]||(s[26]=h("ul",null,[h("li",null,"每当需要为某个事务分配 ID，就会把全局变量的值赋值给事务 ID，然后变量自增 1"),h("li",null,"每当变量值为 256 的倍数时，就将该变量的值刷新到系统表空间的 Max Trx ID 属性中，该属性占 8 字节"),h("li",null,[u("系统再次启动后，会读取表空间的 Max Trx ID 属性到内存，加上 256 后赋值给全局变量，因为关机时的事务 ID 可能并不是 256 的倍数，会比 Max Trx ID 大，所以需要加上 256 保持事务 ID 是一个"),h("strong",null,"递增的数字")])],-1)),s[27]||(s[27]=h("p",null,[h("strong",null,"聚簇索引"),u("的行记录除了完整的数据，还会自动添加 trx_id、roll_pointer 隐藏列，如果表中没有主键并且没有非空唯一索引，也会添加一个 row_id 的隐藏列作为聚簇索引")],-1)),s[28]||(s[28]=h("hr",null,null,-1)),s[29]||(s[29]=h("h3",{id:"隔离级别",tabindex:"-1"},[u("隔离级别 "),h("a",{class:"header-anchor",href:"#隔离级别","aria-label":'Permalink to "隔离级别"'},"​")],-1)),s[30]||(s[30]=h("h4",{id:"四种级别",tabindex:"-1"},[u("四种级别 "),h("a",{class:"header-anchor",href:"#四种级别","aria-label":'Permalink to "四种级别"'},"​")],-1)),s[31]||(s[31]=h("p",null,[u("事务的隔离级别：多个客户端操作时，各个客户端的事务之间应该是隔离的，"),h("strong",null,"不同的事务之间不该互相影响"),u("，而如果多个事务操作同一批数据时，则需要设置不同的隔离级别，否则就会产生问题。")],-1)),s[32]||(s[32]=h("p",null,"隔离级别分类：",-1)),s[33]||(s[33]=h("table",null,[h("thead",null,[h("tr",null,[h("th",null,"隔离级别"),h("th",null,"名称"),h("th",null,"会引发的问题"),h("th",null,"数据库默认隔离级别")])]),h("tbody",null,[h("tr",null,[h("td",null,"Read Uncommitted"),h("td",null,"读未提交"),h("td",null,"脏读、不可重复读、幻读"),h("td")]),h("tr",null,[h("td",null,"Read Committed"),h("td",null,"读已提交"),h("td",null,"不可重复读、幻读"),h("td",null,"Oracle / SQL Server")]),h("tr",null,[h("td",null,"Repeatable Read"),h("td",null,"可重复读"),h("td",null,"幻读"),h("td",null,"MySQL")]),h("tr",null,[h("td",null,"Serializable"),h("td",null,"可串行化"),h("td",null,"无"),h("td")])])],-1)),s[34]||(s[34]=h("p",null,"一般来说，隔离级别越低，系统开销越低，可支持的并发越高，但隔离性也越差",-1)),s[35]||(s[35]=h("ul",null,[h("li",null,[h("p",null,"脏写 (Dirty Write)：当两个或多个事务选择同一行，最初的事务修改的值被后面事务修改的值覆盖，所有的隔离级别都可以避免脏写（又叫丢失更新），因为有行锁")]),h("li",null,[h("p",null,[u("脏读 (Dirty Reads)：在一个事务处理过程中读取了另一个"),h("strong",null,"未提交"),u("的事务中修改过的数据")])]),h("li",null,[h("p",null,[u("不可重复读 (Non-Repeatable Reads)：在一个事务处理过程中读取了另一个事务中修改并"),h("strong",null,"已提交"),u("的数据")]),h("blockquote",null,[h("p",null,"可重复读的意思是不管读几次，结果都一样，可以重复的读，可以理解为快照读，要读的数据集不会发生变化")])]),h("li",null,[h("p",null,[u("幻读 (Phantom Reads)：在事务中按某个条件先后两次查询数据库，后一次查询查到了前一次查询没有查到的行，"),h("strong",null,"数据条目"),u("发生了变化。比如查询某数据不存在，准备插入此记录，但执行插入时发现此记录已存在，无法插入")])])],-1)),s[36]||(s[36]=h("p",null,"隔离级别操作语法：",-1)),s[37]||(s[37]=h("ul",null,[h("li",null,[h("p",null,"查询数据库隔离级别"),h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"SELECT"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," @@TX_ISOLATION"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";\t\t\t"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 会话")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"SELECT"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," @@GLOBAL.TX_ISOLATION"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";\t"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 系统")])])]),h("button",{class:"collapse"})])]),h("li",null,[h("p",null,"修改数据库隔离级别"),h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"SET"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," GLOBAL"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," TRANSACTION"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ISOLATION"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," LEVEL"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 级别字符串"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")])])]),h("button",{class:"collapse"})])])],-1)),s[38]||(s[38]=h("hr",null,null,-1)),s[39]||(s[39]=h("h4",{id:"加锁分析",tabindex:"-1"},[u("加锁分析 "),h("a",{class:"header-anchor",href:"#加锁分析","aria-label":'Permalink to "加锁分析"'},"​")],-1)),s[40]||(s[40]=h("p",null,"InnoDB 存储引擎支持事务，所以加锁分析是基于该存储引擎",-1)),s[41]||(s[41]=h("ul",null,[h("li",null,[h("p",null,"Read Uncommitted 级别，任何操作都不会加锁")]),h("li",null,[h("p",null,"Read Committed 级别，增删改操作会加写锁（行锁），读操作不加锁"),h("p",null,[u("在 Server 层过滤条件时发现不满足的记录会调用 unlock_row 方法释放该记录的行锁，保证最后只有满足条件的记录加锁，但是扫表过程中每条记录的"),h("strong",null,"加锁操作不能省略"),u("。所以对数据量很大的表做批量修改时，如果无法使用相应的索引（全表扫描），在 Server 过滤数据时就会特别慢，出现虽然没有修改某些行的数据，但是还是被锁住了的现象（锁表），这种情况同样适用于 RR")])]),h("li",null,[h("p",null,[u("Repeatable Read 级别，增删改操作会加写锁，读操作不加锁。因为读写锁不兼容，"),h("strong",null,"加了读锁后其他事务就无法修改数据"),u("，影响了并发性能，为了保证隔离性和并发性，MySQL 通过 MVCC 解决了读写冲突。RR 级别下的锁有很多种，锁机制章节详解")])]),h("li",null,[h("p",null,"Serializable 级别，读加共享锁，写加排他锁，读写互斥，使用的悲观锁的理论，实现简单，数据更加安全，但是并发能力非常差"),h("ul",null,[h("li",null,"串行化：让所有事务按顺序单独执行，写操作会加写锁，读操作会加读锁"),h("li",null,"可串行化：让所有操作相同数据的事务顺序执行，通过加锁实现")])])],-1)),s[42]||(s[42]=h("p",null,[u("参考文章："),h("a",{href:"https://tech.meituan.com/2014/08/20/innodb-lock.html",target:"_blank",rel:"noreferrer"},"https://tech.meituan.com/2014/08/20/innodb-lock.html")],-1)),s[43]||(s[43]=h("hr",null,null,-1)),s[44]||(s[44]=h("h3",{id:"原子特性",tabindex:"-1"},[u("原子特性 "),h("a",{class:"header-anchor",href:"#原子特性","aria-label":'Permalink to "原子特性"'},"​")],-1)),s[45]||(s[45]=h("h4",{id:"实现方式",tabindex:"-1"},[u("实现方式 "),h("a",{class:"header-anchor",href:"#实现方式","aria-label":'Permalink to "实现方式"'},"​")],-1)),s[46]||(s[46]=h("p",null,"原子性是指事务是一个不可分割的工作单位，事务的操作如果成功就必须要完全应用到数据库，失败则不能对数据库有任何影响。比如事务中一个 SQL 语句执行失败，则已执行的语句也必须回滚，数据库退回到事务前的状态",-1)),s[47]||(s[47]=h("p",null,"InnoDB 存储引擎提供了两种事务日志：redo log（重做日志）和 undo log（回滚日志）",-1)),s[48]||(s[48]=h("ul",null,[h("li",null,"redo log 用于保证事务持久性"),h("li",null,"undo log 用于保证事务原子性和隔离性")],-1)),s[49]||(s[49]=h("p",null,[u("undo log 属于"),h("strong",null,"逻辑日志"),u("，根据每行操作进行记录，记录了 SQL 执行相关的信息，用来回滚行记录到某个版本")],-1)),s[50]||(s[50]=h("p",null,[u("当事务对数据库进行修改时，InnoDB 会先记录对应的 undo log，如果事务执行失败或调用了 rollback 导致事务回滚，InnoDB 会根据 undo log 的内容"),h("strong",null,"做与之前相反的操作"),u("：")],-1)),s[51]||(s[51]=h("ul",null,[h("li",null,[h("p",null,"对于每个 insert，回滚时会执行 delete")]),h("li",null,[h("p",null,"对于每个 delete，回滚时会执行 insert")]),h("li",null,[h("p",null,"对于每个 update，回滚时会执行一个相反的 update，把数据修改回去")])],-1)),s[52]||(s[52]=h("p",null,[u("参考文章："),h("a",{href:"https://www.cnblogs.com/kismetv/p/10331633.html",target:"_blank",rel:"noreferrer"},"https://www.cnblogs.com/kismetv/p/10331633.html")],-1)),s[53]||(s[53]=h("hr",null,null,-1)),s[54]||(s[54]=h("h4",{id:"dml-解析",tabindex:"-1"},[u("DML 解析 "),h("a",{class:"header-anchor",href:"#dml-解析","aria-label":'Permalink to "DML 解析"'},"​")],-1)),s[55]||(s[55]=h("h5",{id:"insert",tabindex:"-1"},[u("INSERT "),h("a",{class:"header-anchor",href:"#insert","aria-label":'Permalink to "INSERT"'},"​")],-1)),s[56]||(s[56]=h("p",null,"乐观插入：当前数据页的剩余空间充足，直接将数据进行插入",-1)),s[57]||(s[57]=h("p",null,"悲观插入：当前数据页的剩余空间不足，需要进行页分裂，申请一个新的页面来插入数据，会造成更多的 redo log，undo log 影响不大",-1)),s[58]||(s[58]=h("p",null,[u("当向某个表插入一条记录，实际上需要向聚簇索引和所有二级索引都插入一条记录，但是 undo log "),h("strong",null,"只针对聚簇索引记录"),u("，在回滚时会根据聚簇索引去所有的二级索引进行回滚操作")],-1)),s[59]||(s[59]=h("p",null,[u("roll_pointer 是一个指针，"),h("strong",null,"指向记录对应的 undo log 日志"),u("，一条记录就是一个数据行，行格式中的 roll_pointer 就指向 undo log")],-1)),s[60]||(s[60]=h("hr",null,null,-1)),s[61]||(s[61]=h("h5",{id:"delete",tabindex:"-1"},[u("DELETE "),h("a",{class:"header-anchor",href:"#delete","aria-label":'Permalink to "DELETE"'},"​")],-1)),s[62]||(s[62]=h("p",null,"插入到页面中的记录会根据 next_record 属性组成一个单向链表，这个链表称为正常链表，被删除的记录也会通过 next_record 组成一个垃圾链表，该链表中所占用的存储空间可以被重新利用，并不会直接清除数据",-1)),s[63]||(s[63]=h("p",null,"在页面 Page Header 中，PAGE_FREE 属性指向垃圾链表的头节点，删除的工作过程：",-1)),s[64]||(s[64]=h("ul",null,[h("li",null,[h("p",null,[u("将要删除的记录的 delete_flag 位置为 1，其他不做修改，这个过程叫 "),h("strong",null,"delete mark")])]),h("li",null,[h("p",null,"在事务提交前，delete_flag = 1 的记录一直都会处于中间状态")]),h("li",null,[h("p",null,[u("事务提交后，有专门的线程将 delete_flag = 1 的记录从正常链表移除并加入垃圾链表，这个过程叫 "),h("strong",null,"purge")]),h("p",null,"purge 线程在执行删除操作时会创建一个 ReadView，根据事务的可见性移除数据（隔离特性部分详解）")])],-1)),s[65]||(s[65]=h("p",null,"当有新插入的记录时，首先判断 PAGE_FREE 指向的头节点是否足够容纳新纪录：",-1)),s[66]||(s[66]=h("ul",null,[h("li",null,"如果可以容纳新纪录，就会直接重用已删除的记录的存储空间，然后让 PAGE_FREE 指向垃圾链表的下一个节点"),h("li",null,"如果不能容纳新纪录，就直接向页面申请新的空间存储，并不会遍历垃圾链表")],-1)),s[67]||(s[67]=h("p",null,"重用已删除的记录空间，可能会造成空间碎片，当数据页容纳不了一条记录时，会判断将碎片空间加起来是否可以容纳，判断为真就会重新组织页内的记录：",-1)),s[68]||(s[68]=h("ul",null,[h("li",null,"开辟一个临时页面，将页内记录一次插入到临时页面，此时临时页面时没有碎片的"),h("li",null,"把临时页面的内容复制到本页，这样就解放出了内存碎片，但是会耗费很大的性能资源")],-1)),s[69]||(s[69]=h("hr",null,null,-1)),s[70]||(s[70]=h("h5",{id:"update",tabindex:"-1"},[u("UPDATE "),h("a",{class:"header-anchor",href:"#update","aria-label":'Permalink to "UPDATE"'},"​")],-1)),s[71]||(s[71]=h("p",null,"执行 UPDATE 语句，对于更新主键和不更新主键有两种不同的处理方式",-1)),s[72]||(s[72]=h("p",null,"不更新主键的情况：",-1)),s[73]||(s[73]=h("ul",null,[h("li",null,[h("p",null,"就地更新（in-place update），如果更新后的列和更新前的列占用的存储空间一样大，就可以直接在原记录上修改")]),h("li",null,[h("p",null,"先删除旧纪录，再插入新纪录，这里的删除不是 delete mark，而是直接将记录加入垃圾链表，并且修改页面的相应的控制信息，执行删除的线程不是 purge，是执行更新的用户线程，插入新记录时可能造成页空间不足，从而导致页分裂")])],-1)),s[74]||(s[74]=h("p",null,"更新主键的情况：",-1)),s[75]||(s[75]=h("ul",null,[h("li",null,"将旧纪录进行 delete mark，在更新语句提交后由 purge 线程移入垃圾链表"),h("li",null,"根据更新的各列的值创建一条新纪录，插入到聚簇索引中")],-1)),s[76]||(s[76]=h("p",null,[u("在对一条记录修改前会"),h("strong",null,"将记录的隐藏列 trx_id 和 roll_pointer 的旧值记录到当前 undo log 对应的属性中"),u("，这样当前记录的 roll_pointer 指向当前 undo log 记录，当前 undo log 记录的 roll_pointer 指向旧的 undo log 记录，"),h("strong",null,"形成一个版本链")],-1)),s[77]||(s[77]=h("p",null,"UPDATE、DELETE 操作产生的 undo 日志会用于其他事务的 MVCC 操作，所以不能立即删除，INSERT 可以删除的原因是 MVCC 是对现有数据的快照",-1)),s[78]||(s[78]=h("hr",null,null,-1)),s[79]||(s[79]=h("h4",{id:"回滚日志",tabindex:"-1"},[u("回滚日志 "),h("a",{class:"header-anchor",href:"#回滚日志","aria-label":'Permalink to "回滚日志"'},"​")],-1)),s[80]||(s[80]=h("p",null,"undo log 是采用段的方式来记录，Rollback Segement 称为回滚段，本质上就是一个类型是 Rollback Segement Header 的页面",-1)),s[81]||(s[81]=h("p",null,"每个回滚段中有 1024 个 undo slot，每个 slot 存放 undo 链表页面的头节点页号，每个链表对应一个叫 undo log segment 的段",-1)),s[82]||(s[82]=h("ul",null,[h("li",null,"在以前老版本，只支持 1 个 Rollback Segement，只能记录 1024 个 undo log segment"),h("li",null,"MySQL5.5 开始支持 128 个 Rollback Segement，支持 128*1024 个 undo 操作")],-1)),s[83]||(s[83]=h("p",null,"工作流程：",-1)),s[84]||(s[84]=h("ul",null,[h("li",null,[h("p",null,"事务执行前需要到系统表空间第 5 号页面中分配一个回滚段（页），获取一个 Rollback Segement Header 页面的地址")]),h("li",null,[h("p",null,"回滚段页面有 1024 个 undo slot，首先去回滚段的两个 cached 链表获取缓存的 slot，缓存中没有就在回滚段页面中找一个可用的 undo slot 分配给当前事务")]),h("li",null,[h("p",null,"如果是缓存中获取的 slot，则该 slot 对应的 undo log segment 已经分配了，需要重新分配，然后从 undo log segment 中申请一个页面作为日志链表的头节点，并填入对应的 slot 中")]),h("li",null,[h("p",null,[u("每个事务 undo 日志在记录的时候"),h("strong",null,"占用两个 undo 页面的组成链表"),u("，分别为 insert undo 链表和 update undo 链表，链表的头节点页面为 first undo page 会包含一些管理信息，其他页面为 normal undo page")]),h("p",null,"说明：事务执行过程的临时表也需要两个 undo 链表，不和普通表共用，这些链表并不是事务开始就分配，而是按需分配")])],-1)),s[85]||(s[85]=h("hr",null,null,-1)),s[86]||(s[86]=h("h3",{id:"隔离特性",tabindex:"-1"},[u("隔离特性 "),h("a",{class:"header-anchor",href:"#隔离特性","aria-label":'Permalink to "隔离特性"'},"​")],-1)),s[87]||(s[87]=h("h4",{id:"实现方式-1",tabindex:"-1"},[u("实现方式 "),h("a",{class:"header-anchor",href:"#实现方式-1","aria-label":'Permalink to "实现方式"'},"​")],-1)),s[88]||(s[88]=h("p",null,"隔离性是指，事务内部的操作与其他事务是隔离的，多个并发事务之间要相互隔离，不能互相干扰",-1)),s[89]||(s[89]=h("ul",null,[h("li",null,[h("p",null,"严格的隔离性，对应了事务隔离级别中的 serializable，实际应用中对性能考虑很少使用可串行化")]),h("li",null,[h("p",null,[u("与原子性、持久性侧重于研究事务本身不同，隔离性研究的是"),h("strong",null,"不同事务"),u("之间的相互影响")])])],-1)),s[90]||(s[90]=h("p",null,"隔离性让并发情形下的事务之间互不干扰：",-1)),s[91]||(s[91]=h("ul",null,[h("li",null,"一个事务的写操作对另一个事务的写操作（写写）：锁机制保证隔离性"),h("li",null,"一个事务的写操作对另一个事务的读操作（读写）：MVCC 保证隔离性")],-1)),s[92]||(s[92]=h("p",null,"锁机制：事务在修改数据之前，需要先获得相应的锁，获得锁之后，事务便可以修改数据；该事务操作期间，这部分数据是锁定的，其他事务如果需要修改数据，需要等待当前事务提交或回滚后释放锁（详解见锁机制）",-1)),s[93]||(s[93]=h("hr",null,null,-1)),s[94]||(s[94]=h("h4",{id:"并发控制",tabindex:"-1"},[u("并发控制 "),h("a",{class:"header-anchor",href:"#并发控制","aria-label":'Permalink to "并发控制"'},"​")],-1)),s[95]||(s[95]=h("p",null,[u("MVCC 全称 Multi-Version Concurrency Control，即多版本并发控制，用来"),h("strong",null,"解决读写冲突的无锁并发控制"),u("，可以在发生读写请求冲突时不用加锁解决，这个读是指的快照读（也叫一致性读或一致性无锁读），而不是当前读：")],-1)),s[96]||(s[96]=h("ul",null,[h("li",null,"快照读：实现基于 MVCC，因为是多版本并发，所以快照读读到的数据不一定是当前最新的数据，有可能是历史版本的数据"),h("li",null,[u("当前读：又叫加锁读，读取数据库记录是当前"),h("strong",null,"最新的版本"),u("（产生幻读、不可重复读），可以对读取的数据进行加锁，防止其他事务修改数据，是悲观锁的一种操作，读写操作加共享锁或者排他锁和串行化事务的隔离级别都是当前读")])],-1)),s[97]||(s[97]=h("p",null,"数据库并发场景：",-1)),s[98]||(s[98]=h("ul",null,[h("li",null,[h("p",null,"读-读：不存在任何问题，也不需要并发控制")]),h("li",null,[h("p",null,"读-写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读")]),h("li",null,[h("p",null,"写-写：有线程安全问题，可能会存在脏写（丢失更新）问题")])],-1)),s[99]||(s[99]=h("p",null,"MVCC 的优点：",-1)),s[100]||(s[100]=h("ul",null,[h("li",null,"在并发读写数据库时，做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了并发读写的性能"),h("li",null,"可以解决脏读，不可重复读等事务隔离问题（加锁也能解决），但不能解决更新丢失问题（写锁会解决）")],-1)),s[101]||(s[101]=h("p",null,"提高读写和写写的并发性能：",-1)),s[102]||(s[102]=h("ul",null,[h("li",null,"MVCC + 悲观锁：MVCC 解决读写冲突，悲观锁解决写写冲突"),h("li",null,"MVCC + 乐观锁：MVCC 解决读写冲突，乐观锁解决写写冲突")],-1)),s[103]||(s[103]=h("p",null,[u("参考文章："),h("a",{href:"https://www.jianshu.com/p/8845ddca3b23",target:"_blank",rel:"noreferrer"},"https://www.jianshu.com/p/8845ddca3b23")],-1)),s[104]||(s[104]=h("hr",null,null,-1)),s[105]||(s[105]=h("h4",{id:"实现原理",tabindex:"-1"},[u("实现原理 "),h("a",{class:"header-anchor",href:"#实现原理","aria-label":'Permalink to "实现原理"'},"​")],-1)),s[106]||(s[106]=h("h5",{id:"隐藏字段",tabindex:"-1"},[u("隐藏字段 "),h("a",{class:"header-anchor",href:"#隐藏字段","aria-label":'Permalink to "隐藏字段"'},"​")],-1)),s[107]||(s[107]=h("p",null,"实现原理主要是隐藏字段，undo日志，Read View 来实现的",-1)),s[108]||(s[108]=h("p",null,[u("InnoDB 存储引擎，数据库中的"),h("strong",null,"聚簇索引"),u("每行数据，除了自定义的字段，还有数据库隐式定义的字段：")],-1)),s[109]||(s[109]=h("ul",null,[h("li",null,"DB_TRX_ID：最近修改事务 ID，记录创建该数据或最后一次修改该数据的事务 ID"),h("li",null,[u("DB_ROLL_PTR：回滚指针，"),h("strong",null,"指向记录对应的 undo log 日志"),u("，undo log 中又指向上一个旧版本的 undo log")]),h("li",null,[u("DB_ROW_ID：隐含的自增 ID（"),h("strong",null,"隐藏主键"),u("），如果数据表没有主键，InnoDB 会自动以 DB_ROW_ID 作为聚簇索引")])],-1)),s[110]||(s[110]=h("figure",null,[h("img",{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/DB/MySQL-MVCC%E7%89%88%E6%9C%AC%E9%93%BE%E9%9A%90%E8%97%8F%E5%AD%97%E6%AE%B5.png",alt:"",loading:"lazy",decoding:"async",class:"lazy"})],-1)),s[111]||(s[111]=h("hr",null,null,-1)),s[112]||(s[112]=h("h5",{id:"版本链",tabindex:"-1"},[u("版本链 "),h("a",{class:"header-anchor",href:"#版本链","aria-label":'Permalink to "版本链"'},"​")],-1)),s[113]||(s[113]=h("p",null,[u("undo log 是逻辑日志，记录的是每个事务对数据执行的操作，而不是记录的全部数据，要"),h("strong",null,"根据 undo log 逆推出以往事务的数据")],-1)),s[114]||(s[114]=h("p",null,"undo log 的作用：",-1)),s[115]||(s[115]=h("ul",null,[h("li",null,"保证事务进行 rollback 时的原子性和一致性，当事务进行回滚的时候可以用 undo log 的数据进行恢复"),h("li",null,"用于 MVCC 快照读，通过读取 undo log 的历史版本数据可以实现不同事务版本号都拥有自己独立的快照数据")],-1)),s[116]||(s[116]=h("p",null,"undo log 主要分为两种：",-1)),s[117]||(s[117]=h("ul",null,[h("li",null,[h("p",null,"insert undo log：事务在 insert 新记录时产生的 undo log，只在事务回滚时需要，并且在事务提交后可以被立即丢弃")]),h("li",null,[h("p",null,"update undo log：事务在进行 update 或 delete 时产生的 undo log，在事务回滚时需要，在快照读时也需要。不能随意删除，只有在当前读或事务回滚不涉及该日志时，对应的日志才会被 purge 线程统一清除")])],-1)),s[118]||(s[118]=h("p",null,[u("每次对数据库记录进行改动，都会产生的新版本的 undo log，随着更新次数的增多，所有的版本都会被 roll_pointer 属性连接成一个链表，把这个链表称之为"),h("strong",null,"版本链"),u("，版本链的头节点就是当前的最新的 undo log，链尾就是最早的旧 undo log")],-1)),s[119]||(s[119]=h("p",null,"说明：因为 DELETE 删除记录，都是移动到垃圾链表中，不是真正的删除，所以才可以通过版本链访问原始数据",-1)),s[120]||(s[120]=h("img",{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/DB/MySQL-MVCC版本链.png",style:{zoom:"80%"}},null,-1)),s[121]||(s[121]=h("p",null,"注意：undo 是逻辑日志，这里只是直观的展示出来",-1)),s[122]||(s[122]=h("p",null,"工作流程：",-1)),s[123]||(s[123]=h("ul",null,[h("li",null,"有个事务插入 persion 表一条新记录，name 为 Jerry，age 为 24"),h("li",null,"事务 1 修改该行数据时，数据库会先对该行加排他锁，然后先记录 undo log，然后修改该行 name 为 Tom，并且修改隐藏字段的事务 ID 为当前事务 1 的 ID（默认为 1 之后递增），回滚指针指向拷贝到 undo log 的副本记录，事务提交后，释放锁"),h("li",null,"以此类推")],-1)),s[124]||(s[124]=h("hr",null,null,-1)),s[125]||(s[125]=h("h5",{id:"读视图",tabindex:"-1"},[u("读视图 "),h("a",{class:"header-anchor",href:"#读视图","aria-label":'Permalink to "读视图"'},"​")],-1)),s[126]||(s[126]=h("p",null,"Read View 是事务进行读数据操作时产生的读视图，该事务执行快照读的那一刻会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的 ID，用来做可见性判断，根据视图判断当前事务能够看到哪个版本的数据",-1)),s[127]||(s[127]=h("p",null,"注意：这里的快照并不是把所有的数据拷贝一份副本，而是由 undo log 记录的逻辑日志，根据库中的数据进行计算出历史数据",-1)),s[128]||(s[128]=h("p",null,"工作流程：将版本链的头节点的事务 ID（最新数据事务 ID，大概率不是当前线程）DB_TRX_ID 取出来，与系统当前活跃事务的 ID 对比进行可见性分析，不可见就通过 DB_ROLL_PTR 回滚指针去取出 undo log 中的下一个 DB_TRX_ID 比较，直到找到最近的满足可见性的 DB_TRX_ID，该事务 ID 所在的旧记录就是当前事务能看见的最新的记录",-1)),s[129]||(s[129]=h("p",null,"Read View 几个属性：",-1)),s[130]||(s[130]=h("ul",null,[h("li",null,"m_ids：生成 Read View 时当前系统中活跃的事务 id 列表（未提交的事务集合，当前事务也在其中）"),h("li",null,"min_trx_id：生成 Read View 时当前系统中活跃的最小的事务 id，也就是 m_ids 中的最小值（已提交的事务集合）"),h("li",null,"max_trx_id：生成 Read View 时当前系统应该分配给下一个事务的 id 值，m_ids 中的最大值加 1（未开始事务）"),h("li",null,"creator_trx_id：生成该 Read View 的事务的事务 id，就是判断该 id 的事务能读到什么数据")],-1)),s[131]||(s[131]=h("p",null,"creator 创建一个 Read View，进行可见性算法分析：（解决了读未提交）",-1)),s[132]||(s[132]=h("ul",null,[h("li",null,[h("p",null,"db_trx_id == creator_trx_id：表示这个数据就是当前事务自己生成的，自己生成的数据自己肯定能看见，所以此数据对 creator 是可见的")]),h("li",null,[h("p",null,"db_trx_id < min_trx_id：该版本对应的事务 ID 小于 Read view 中的最小活跃事务 ID，则这个事务在当前事务之前就已经被提交了，对 creator 可见（因为比已提交的最大事务 ID 小的并不一定已经提交，所以应该判断是否在活跃事务列表）")]),h("li",null,[h("p",null,"db_trx_id >= max_trx_id：该版本对应的事务 ID 大于 Read view 中当前系统的最大事务 ID，则说明该数据是在当前 Read view 创建之后才产生的，对 creator 不可见")]),h("li",null,[h("p",null,"min_trx_id<= db_trx_id < max_trx_id：判断 db_trx_id 是否在活跃事务列表 m_ids 中"),h("ul",null,[h("li",null,[u("在列表中，说明该版本对应的事务正在运行，数据不能显示（"),h("strong",null,"不能读到未提交的数据"),u("）")]),h("li",null,[u("不在列表中，说明该版本对应的事务已经被提交，数据可以显示（"),h("strong",null,"可以读到已经提交的数据"),u("）")])])])],-1)),s[133]||(s[133]=h("hr",null,null,-1)),s[134]||(s[134]=h("h5",{id:"工作流程",tabindex:"-1"},[u("工作流程 "),h("a",{class:"header-anchor",href:"#工作流程","aria-label":'Permalink to "工作流程"'},"​")],-1)),s[135]||(s[135]=h("p",null,"表 user 数据",-1)),s[136]||(s[136]=h("div",{style:{"max-height":"300px"},class:"language-sh vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"sh"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"id"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"\t\tname"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"\t\tage")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"1"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"\t\t张三"),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\t\t   18")])])]),h("button",{class:"collapse"})],-1)),s[137]||(s[137]=h("p",null,"Transaction 20：",-1)),s[138]||(s[138]=h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"START"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," TRANSACTION"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";\t"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 开启事务")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"UPDATE"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," user"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," SET"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," name"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ="),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '李四'"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," WHERE"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," id"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ="),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 1"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"UPDATE"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," user"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," SET"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," name"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ="),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '王五'"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," WHERE"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," id"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ="),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 1"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")])])]),h("button",{class:"collapse"})],-1)),s[139]||(s[139]=h("p",null,"Transaction 60：",-1)),s[140]||(s[140]=h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"START"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," TRANSACTION"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";\t"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 开启事务")]),u("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"--"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 操作表的其他数据")])])]),h("button",{class:"collapse"})],-1)),s[141]||(s[141]=h("figure",null,[h("img",{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/DB/MySQL-MVCC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B1.png",alt:"",loading:"lazy",decoding:"async",class:"lazy"})],-1)),s[142]||(s[142]=h("p",null,"ID 为 0 的事务创建 Read View：",-1)),s[143]||(s[143]=h("ul",null,[h("li",null,"m_ids：20、60"),h("li",null,"min_trx_id：20"),h("li",null,"max_trx_id：61"),h("li",null,"creator_trx_id：0")],-1)),s[144]||(s[144]=h("figure",null,[h("img",{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/DB/MySQL-MVCC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B2.png",alt:"",loading:"lazy",decoding:"async",class:"lazy"})],-1)),s[145]||(s[145]=h("p",null,"只有红框部分才复合条件，所以只有张三对应的版本的数据可以被看到",-1)),s[146]||(s[146]=h("p",null,[u("参考视频："),h("a",{href:"https://www.bilibili.com/video/BV1t5411u7Fg",target:"_blank",rel:"noreferrer"},"https://www.bilibili.com/video/BV1t5411u7Fg")],-1)),s[147]||(s[147]=h("hr",null,null,-1)),s[148]||(s[148]=h("h5",{id:"二级索引",tabindex:"-1"},[u("二级索引 "),h("a",{class:"header-anchor",href:"#二级索引","aria-label":'Permalink to "二级索引"'},"​")],-1)),s[149]||(s[149]=h("p",null,"只有在聚簇索引中才有 trx_id 和 roll_pointer 的隐藏列，对于二级索引判断可见性的方式：",-1)),s[150]||(s[150]=h("ul",null,[h("li",null,"二级索引页面的 Page Header 中有一个 PAGE_MAX_TRX_ID 属性，代表修改当前页面的最大的事务 ID，SELECT 语句访问某个二级索引时会判断 ReadView 的 min_trx_id 是否大于该属性，大于说明该页面的所有属性对 ReadView 可见"),h("li",null,[u("如果属性判断不可见，就需要利用二级索引获取主键值进行"),h("strong",null,"回表操作"),u("，得到聚簇索引后按照聚簇索引的可见性判断的方法操作")])],-1)),s[151]||(s[151]=h("hr",null,null,-1)),s[152]||(s[152]=h("h4",{id:"rc-rr",tabindex:"-1"},[u("RC RR "),h("a",{class:"header-anchor",href:"#rc-rr","aria-label":'Permalink to "RC RR"'},"​")],-1)),s[153]||(s[153]=h("p",null,[u("Read View 用于支持 RC（Read Committed，读已提交）和 RR（Repeatable Read，可重复读）隔离级别的实现，所以 "),h("strong",null,"SELECT 在 RC 和 RR 隔离级别使用 MVCC 读取记录")],-1)),s[154]||(s[154]=h("p",null,"RR、RC 生成时机：",-1)),s[155]||(s[155]=h("ul",null,[h("li",null,"RC 隔离级别下，每次读取数据前都会生成最新的 Read View（当前读）"),h("li",null,"RR 隔离级别下，在第一次数据读取时才会创建 Read View（快照读）")],-1)),s[156]||(s[156]=h("p",null,"RC、RR 级别下的 InnoDB 快照读区别",-1)),s[157]||(s[157]=h("ul",null,[h("li",null,[h("p",null,"RC 级别下，事务中每次快照读都会新生成一个 Read View，这就是在 RC 级别下的事务中可以看到别的事务提交的更新的原因")]),h("li",null,[h("p",null,[u("RR 级别下，某个事务的对某条记录的"),h("strong",null,"第一次快照读"),u("会创建一个 Read View， 将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，使用的是同一个 Read View，所以一个事务的查询结果每次都是相同的")]),h("p",null,[u("RR 级别下，通过 "),h("code",null,"START TRANSACTION WITH CONSISTENT SNAPSHOT"),u(" 开启事务，会在执行该语句后立刻生成一个 Read View，不是在执行第一条 SELECT 语句时生成（所以说 "),h("code",null,"START TRANSACTION"),u(" 并不是事务的起点，执行第一条语句才算起点）")])])],-1)),s[158]||(s[158]=h("p",null,"解决幻读问题：",-1)),s[159]||(s[159]=h("ul",null,[h("li",null,[h("p",null,[u("快照读：通过 MVCC 来进行控制的，在可重复读隔离级别下，普通查询是快照读，是不会看到别的事务插入的数据的，但是"),h("strong",null,"并不能完全避免幻读")]),h("p",null,[u("场景：RR 级别，T1 事务开启，创建 Read View，此时 T2 去 INSERT 新的一行然后提交，然后 T1 去 UPDATE 该行会发现更新成功，并且把这条新记录的 trx_id 变为当前的事务 id，所以对当前事务就是可见的。因为 "),h("strong",null,"Read View 并不能阻止事务去更新数据，更新数据都是先读后写并且是当前读"),u("，读取到的是最新版本的数据")])]),h("li",null,[h("p",null,"当前读：通过 next-key 锁（行锁 + 间隙锁）来解决问题")])],-1)),s[160]||(s[160]=h("hr",null,null,-1)),s[161]||(s[161]=h("h3",{id:"持久特性",tabindex:"-1"},[u("持久特性 "),h("a",{class:"header-anchor",href:"#持久特性","aria-label":'Permalink to "持久特性"'},"​")],-1)),s[162]||(s[162]=h("h4",{id:"实现方式-2",tabindex:"-1"},[u("实现方式 "),h("a",{class:"header-anchor",href:"#实现方式-2","aria-label":'Permalink to "实现方式"'},"​")],-1)),s[163]||(s[163]=h("p",null,"持久性是指一个事务一旦被提交了，那么对数据库中数据的改变就是永久性的，接下来的其他操作或故障不应该对其有任何影响。",-1)),s[164]||(s[164]=h("p",null,"Buffer Pool 的使用提高了读写数据的效率，但是如果 MySQL 宕机，此时 Buffer Pool 中修改的数据还没有刷新到磁盘，就会导致数据的丢失，事务的持久性无法保证，所以引入了 redo log 日志：",-1)),s[165]||(s[165]=h("ul",null,[h("li",null,[u("redo log "),h("strong",null,"记录数据页的物理修改"),u("，而不是某一行或某几行的修改，用来恢复提交后的数据页，只能"),h("strong",null,"恢复到最后一次提交"),u("的位置")]),h("li",null,[u("redo log 采用的是 WAL（Write-ahead logging，"),h("strong",null,"预写式日志"),u("），所有修改要先写入日志，再更新到磁盘，保证了数据不会因 MySQL 宕机而丢失，从而满足了持久性要求")]),h("li",null,"简单的 redo log 是纯粹的物理日志，复杂的 redo log 会存在物理日志和逻辑日志")],-1)),s[166]||(s[166]=h("p",null,"工作过程：MySQL 发生了宕机，InnoDB 会判断一个数据页在崩溃恢复时丢失了更新，就会将它读到内存，然后根据 redo log 内容更新内存，更新完成后，内存页变成脏页，然后进行刷脏",-1)),s[167]||(s[167]=h("p",null,[u("缓冲池的"),h("strong",null,"刷脏策略"),u("：")],-1)),s[168]||(s[168]=h("ul",null,[h("li",null,"redo log 文件是固定大小的，如果写满了就要擦除以前的记录，在擦除之前需要把对应的更新持久化到磁盘中"),h("li",null,"Buffer Pool 内存不足，需要淘汰部分数据页（LRU 链表尾部），如果淘汰的是脏页，就要先将脏页写到磁盘（要避免大事务）"),h("li",null,"系统空闲时，后台线程会自动进行刷脏（Flush 链表部分已经详解）"),h("li",null,"MySQL 正常关闭时，会把内存的脏页都刷新到磁盘上")],-1)),s[169]||(s[169]=h("hr",null,null,-1)),s[170]||(s[170]=h("h4",{id:"重做日志",tabindex:"-1"},[u("重做日志 "),h("a",{class:"header-anchor",href:"#重做日志","aria-label":'Permalink to "重做日志"'},"​")],-1)),s[171]||(s[171]=h("h5",{id:"日志缓冲",tabindex:"-1"},[u("日志缓冲 "),h("a",{class:"header-anchor",href:"#日志缓冲","aria-label":'Permalink to "日志缓冲"'},"​")],-1)),s[172]||(s[172]=h("p",null,[u("服务器启动时会向操作系统申请一片连续内存空间作为 redo log buffer（重做日志缓冲区），可以通过 "),h("code",null,"innodb_log_buffer_size"),u(" 系统变量指定 redo log buffer 的大小，默认是 16MB")],-1)),s[173]||(s[173]=h("p",null,"log buffer 被划分为若干 redo log block（块，类似数据页的概念），每个默认大小 512 字节，每个 block 由 12 字节的 log block head、496 字节的 log block body、4 字节的 log block trailer 组成",-1)),s[174]||(s[174]=h("ul",null,[h("li",null,[u("当数据修改时，先修改 Change Buffer 中的数据，然后在 redo log buffer 记录这次操作，写入 log buffer 的过程是"),h("strong",null,"顺序写入"),u("的（先写入前面的 block，写满后继续写下一个）")]),h("li",null,"log buffer 中有一个指针 buf_free，来标识该位置之前都是填满的 block，该位置之后都是空闲区域")],-1)),s[175]||(s[175]=h("p",null,"MySQL 规定对底层页面的一次原子访问称为一个 Mini-Transaction（MTR），比如在 B+ 树上插入一条数据就算一个 MTR",-1)),s[176]||(s[176]=h("ul",null,[h("li",null,[h("p",null,"一个事务包含若干个 MTR，一个 MTR 对应一组若干条 redo log，一组 redo log 是不可分割的，在进行数据恢复时也把一组 redo log 当作一个不可分割的整体处理")]),h("li",null,[h("p",null,[u("不是每生成一条 redo 日志就将其插入到 log buffer 中，而是一个 MTR 结束后"),h("strong",null,"将一组 redo 日志写入")])])],-1)),s[177]||(s[177]=h("p",null,[u("InnoDB 的 redo log 是"),h("strong",null,"固定大小"),u("的，redo 日志在磁盘中以文件组的形式存储，同一组中的每个文件大小一样格式一样")],-1)),s[178]||(s[178]=h("ul",null,[h("li",null,[h("code",null,"innodb_log_group_home_dir"),u(" 代表磁盘存储 redo log 的文件目录，默认是当前数据目录")]),h("li",null,[h("code",null,"innodb_log_file_size"),u(" 代表文件大小，默认 48M，"),h("code",null,"innodb_log_files_in_group"),u(" 代表文件个数，默认 2 最大 100，所以日志的文件大小为 "),h("code",null,"innodb_log_file_size * innodb_log_files_in_group")])],-1)),s[179]||(s[179]=h("p",null,"redo 日志文件也是由若干个 512 字节的 block 组成，日志文件的前 2048 个字节（前 4 个 block）用来存储一些管理信息，以后的用来存储 log buffer 中的 block 镜像",-1)),s[180]||(s[180]=h("p",null,"注意：block 并不代表一组 redo log，一组日志可能占用不到一个 block 或者几个 block，依赖于 MTR 的大小",-1)),s[181]||(s[181]=h("hr",null,null,-1)),s[182]||(s[182]=h("h5",{id:"日志刷盘",tabindex:"-1"},[u("日志刷盘 "),h("a",{class:"header-anchor",href:"#日志刷盘","aria-label":'Permalink to "日志刷盘"'},"​")],-1)),s[183]||(s[183]=h("p",null,"redo log 需要在事务提交时将日志写入磁盘，但是比 Buffer Pool 修改的数据写入磁盘的速度快，原因：",-1)),s[184]||(s[184]=h("ul",null,[h("li",null,[u("刷脏是随机 IO，因为每次修改的数据位置随机；redo log 和 binlog 都是"),h("strong",null,"顺序写"),u("，磁盘的顺序 IO 比随机 IO 速度要快")]),h("li",null,"刷脏是以数据页（Page）为单位的，一个页上的一个小修改都要整页写入；redo log 中只包含真正需要写入的部分，好几页的数据修改可能只记录在一个 redo log 页中，减少无效 IO"),h("li",null,[h("strong",null,"组提交机制"),u("，可以大幅度降低磁盘的 IO 消耗")])],-1)),s[185]||(s[185]=h("p",null,[u("InnoDB 引擎会在适当的时候，把内存中 redo log buffer 持久化（fsync）到磁盘，具体的"),h("strong",null,"刷盘策略"),u("：")],-1)),s[186]||(s[186]=h("ul",null,[h("li",null,[u("在事务提交时需要进行刷盘，通过修改参数 "),h("code",null,"innodb_flush_log_at_trx_commit"),u(" 设置： "),h("ul",null,[h("li",null,[u("0：表示当提交事务时，并不将缓冲区的 redo 日志写入磁盘，而是等待"),h("strong",null,"后台线程每秒刷新一次")]),h("li",null,[u("1：在事务提交时将缓冲区的 redo 日志"),h("strong",null,"同步写入"),u("到磁盘，保证一定会写入成功（默认值）")]),h("li",null,"2：在事务提交时将缓冲区的 redo 日志异步写入到磁盘，不能保证提交时肯定会写入，只是有这个动作。日志已经在操作系统的缓存，如果操作系统没有宕机而 MySQL 宕机，也是可以恢复数据的")])]),h("li",null,[u("写入 redo log buffer 的日志超过了总容量的一半，就会将日志刷入到磁盘文件，这会影响执行效率，所以开发中应"),h("strong",null,"避免大事务")]),h("li",null,"服务器关闭时"),h("li",null,[u("并行的事务提交（组提交）时，会将将其他事务的 redo log 持久化到磁盘。假设事务 A 已经写入 redo log buffer 中，这时另外一个线程的事务 B 提交，如果 innodb_flush_log_at_trx_commit 设置的是 1，那么事务 B 要把 redo log buffer 里的日志全部持久化到磁盘，"),h("strong",null,"因为多个事务共用一个 redo log buffer"),u("，所以一次 fsync 可以刷盘多个事务的 redo log，提升了并发量")])],-1)),s[187]||(s[187]=h("p",null,[u("服务器启动后 redo 磁盘空间不变，所以 redo 磁盘中的日志文件是被"),h("strong",null,"循环使用"),u("的，采用循环写数据的方式，写完尾部重新写头部，所以要确保头部 log 对应的修改已经持久化到磁盘")],-1)),s[188]||(s[188]=h("hr",null,null,-1)),s[189]||(s[189]=h("h5",{id:"日志序号",tabindex:"-1"},[u("日志序号 "),h("a",{class:"header-anchor",href:"#日志序号","aria-label":'Permalink to "日志序号"'},"​")],-1)),s[190]||(s[190]=h("p",null,[u("lsn (log sequence number) 代表已经写入的 redo 日志量、flushed_to_disk_lsn 指刷新到磁盘中的 redo 日志量，两者都是"),h("strong",null,"全局变量"),u("，如果两者的值相同，说明 log buffer 中所有的 redo 日志都已经持久化到磁盘")],-1)),s[191]||(s[191]=h("p",null,"工作过程：写入 log buffer 数据时，buf_free 会进行偏移，偏移量就会加到 lsn 上",-1)),s[192]||(s[192]=h("p",null,"MTR 的执行过程中修改过的页对应的控制块会加到 Buffer Pool 的 flush 链表中，链表中脏页是按照第一次修改的时间进行排序的（头插），控制块中有两个指针用来记录脏页被修改的时间：",-1)),s[193]||(s[193]=h("ul",null,[h("li",null,[u("oldest_modification：第一次修改 Buffer Pool 中某个缓冲页时，将修改该页的 MTR "),h("strong",null,"开始时"),u("对应的 lsn 值写入这个属性")]),h("li",null,"newest_modification：每次修改页面，都将 MTR 结束时全局的 lsn 值写入这个属性，所以该值是该页面最后一次修改后的 lsn 值")],-1)),s[194]||(s[194]=h("p",null,[u("全局变量 checkpoint_lsn 表示"),h("strong",null,"当前系统可以被覆盖的 redo 日志总量"),u("，当 redo 日志对应的脏页已经被刷新到磁盘后，该文件空间就可以被覆盖重用，此时执行一次 checkpoint 来更新 checkpoint_lsn 的值存入管理信息（刷脏和执行一次 checkpoint 并不是同一个线程），该值的增量就代表磁盘文件中当前位置向后可以被覆盖的文件的量，所以该值是一直增大的")],-1)),s[195]||(s[195]=h("p",null,[h("strong",null,"checkpoint"),u("：从 flush 链表尾部中找出还未刷脏的页面，该页面是当前系统中最早被修改的脏页，该页面之前产生的脏页都已经刷脏，然后将该页 oldest_modification 值赋值给 checkpoint_lsn，因为 lsn 小于该值时产生的 redo 日志都可以被覆盖了")],-1)),s[196]||(s[196]=h("p",null,"但是在系统忙碌时，后台线程的刷脏操作不能将脏页快速刷出，导致系统无法及时执行 checkpoint ，这时需要用户线程从 flush 链表中把最早修改的脏页刷新到磁盘中，然后执行 checkpoint",-1)),s[197]||(s[197]=h("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"java"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"write pos "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"-------"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," checkpoint_lsn "),h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 两值之间的部分表示可以写入的日志量，当 pos 追赶上 lsn 时必须执行 checkpoint")])])]),h("button",{class:"collapse"})],-1)),s[198]||(s[198]=h("p",null,"使用命令可以查看当前 InnoDB 存储引擎各种 lsn 的值：",-1)),s[199]||(s[199]=h("div",{style:{"max-height":"300px"},class:"language-bash vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"bash"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"SHOW"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ENGINE"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," INNODB"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," STATUS"),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\G")])])]),h("button",{class:"collapse"})],-1)),s[200]||(s[200]=h("hr",null,null,-1)),s[201]||(s[201]=h("h5",{id:"崩溃恢复",tabindex:"-1"},[u("崩溃恢复 "),h("a",{class:"header-anchor",href:"#崩溃恢复","aria-label":'Permalink to "崩溃恢复"'},"​")],-1)),s[202]||(s[202]=h("p",null,[u("恢复的起点：在从 redo 日志文件组的管理信息中获取最近发生 checkpoint 的信息，"),h("strong",null,"从 checkpoint_lsn 对应的日志文件开始恢复")],-1)),s[203]||(s[203]=h("p",null,"恢复的终点：扫描日志文件的 block，block 的头部记录着当前 block 使用了多少字节，填满的 block 总是 512 字节， 如果某个 block 不是 512 字节，说明该 block 就是需要恢复的最后一个 block",-1)),s[204]||(s[204]=h("p",null,"恢复的过程：按照 redo log 依次执行恢复数据，优化方式",-1)),s[205]||(s[205]=h("ul",null,[h("li",null,[u("使用哈希表：根据 redo log 的 space id 和 page number 属性计算出哈希值，将对同一页面的修改放入同一个槽里，可以一次性完成对某页的恢复，"),h("strong",null,"避免了随机 IO")]),h("li",null,"跳过已经刷新到磁盘中的页面：数据页的 File Header 中的 FILE_PAGE_LSN 属性（类似 newest_modification）表示最近一次修改页面时的 lsn 值，数据页被刷新到磁盘中，那么该页 lsn 属性肯定大于 checkpoint_lsn")],-1)),s[206]||(s[206]=h("p",null,[u("参考书籍："),h("a",{href:"https://book.douban.com/subject/35231266/",target:"_blank",rel:"noreferrer"},"https://book.douban.com/subject/35231266/")],-1)),s[207]||(s[207]=h("hr",null,null,-1)),s[208]||(s[208]=h("h4",{id:"工作流程-1",tabindex:"-1"},[u("工作流程 "),h("a",{class:"header-anchor",href:"#工作流程-1","aria-label":'Permalink to "工作流程"'},"​")],-1)),s[209]||(s[209]=h("h5",{id:"日志对比",tabindex:"-1"},[u("日志对比 "),h("a",{class:"header-anchor",href:"#日志对比","aria-label":'Permalink to "日志对比"'},"​")],-1)),s[210]||(s[210]=h("p",null,[u("MySQL 中还存在 binlog（二进制日志）也可以记录写操作并用于数据的恢复，"),h("strong",null,"保证数据不丢失"),u("，二者的区别是：")],-1)),s[211]||(s[211]=h("ul",null,[h("li",null,"作用不同：redo log 是用于 crash recovery （故障恢复），保证 MySQL 宕机也不会影响持久性；binlog 是用于 point-in-time recovery 的，保证服务器可以基于时间点恢复数据，此外 binlog 还用于主从复制"),h("li",null,"层次不同：redo log 是 InnoDB 存储引擎实现的，而 binlog 是MySQL的 Server 层实现的，同时支持 InnoDB 和其他存储引擎"),h("li",null,"内容不同：redo log 是物理日志，内容基于磁盘的 Page；binlog 的内容是二进制的，根据 binlog_format 参数的不同，可能基于SQL 语句、基于数据本身或者二者的混合（日志部分详解）"),h("li",null,"写入时机不同：binlog 在事务提交时一次写入；redo log 的写入时机相对多元")],-1)),s[212]||(s[212]=h("p",null,"binlog 为什么不支持崩溃恢复？",-1)),s[213]||(s[213]=h("ul",null,[h("li",null,"binlog 记录的是语句，并不记录数据页级的数据（哪个页改了哪些地方），所以没有能力恢复数据页"),h("li",null,"binlog 是追加写，保存全量的日志，没有标志确定从哪个点开始的数据是已经刷盘了，而 redo log 只要在 checkpoint_lsn 后面的就是没有刷盘的")],-1)),s[214]||(s[214]=h("hr",null,null,-1)),s[215]||(s[215]=h("h5",{id:"更新记录",tabindex:"-1"},[u("更新记录 "),h("a",{class:"header-anchor",href:"#更新记录","aria-label":'Permalink to "更新记录"'},"​")],-1)),s[216]||(s[216]=h("p",null,"更新一条记录的过程：写之前一定先读",-1)),s[217]||(s[217]=h("ul",null,[h("li",null,[h("p",null,"在 B+ 树中定位到该记录，如果该记录所在的页面不在 Buffer Pool 里，先将其加载进内存")]),h("li",null,[h("p",null,"首先更新该记录对应的聚簇索引，更新聚簇索引记录时："),h("ul",null,[h("li",null,[h("p",null,"更新记录前向 undo 页面写 undo 日志，由于这是更改页面，所以需要记录一下相应的 redo 日志"),h("p",null,[u("注意：修改 undo 页面也是在"),h("strong",null,"修改页面"),u("，事务只要修改页面就需要先记录相应的 redo 日志")])]),h("li",null,[h("p",null,[u("然后"),h("strong",null,"记录对应的 redo 日志"),u("（等待 MTR 提交后写入 redo log buffer），"),h("strong",null,"最后进行真正的更新记录")])])])]),h("li",null,[h("p",null,"更新其他的二级索引记录，不会再记录 undo log，只记录 redo log 到 buffer 中")]),h("li",null,[h("p",null,"在一条更新语句执行完成后（也就是将所有待更新记录都更新完了），就会开始记录该语句对应的 binlog 日志，此时记录的 binlog 并没有刷新到硬盘上，还在内存中，在事务提交时才会统一将该事务运行过程中的所有 binlog 日志刷新到硬盘")])],-1)),s[218]||(s[218]=h("p",null,[u("假设表中有字段 id 和 a，存在一条 "),h("code",null,"id = 1, a = 2"),u(" 的记录，此时执行更新语句：")],-1)),s[219]||(s[219]=h("div",{style:{"max-height":"300px"},class:"language-sql vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"sql"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"update"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," table"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," set"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," a"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"2"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," where"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," id"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")])])]),h("button",{class:"collapse"})],-1)),s[220]||(s[220]=h("p",null,"InnoDB 会真正的去执行把值修改成 (1,2) 这个操作，先加行锁，在去更新，并不会提前判断相同就不修改了",-1)),s[221]||(s[221]=h("p",null,[u("参考文章："),h("a",{href:"https://mp.weixin.qq.com/s/wcJ2KisSaMnfP4nH5NYaQA",target:"_blank",rel:"noreferrer"},"https://mp.weixin.qq.com/s/wcJ2KisSaMnfP4nH5NYaQA")],-1)),s[222]||(s[222]=h("hr",null,null,-1)),s[223]||(s[223]=h("h5",{id:"两段提交",tabindex:"-1"},[u("两段提交 "),h("a",{class:"header-anchor",href:"#两段提交","aria-label":'Permalink to "两段提交"'},"​")],-1)),s[224]||(s[224]=h("p",null,"当客户端执行 COMMIT 语句或者在自动提交的情况下，MySQL 内部开启一个 XA 事务，分两阶段来完成 XA 事务的提交：",-1)),s[225]||(s[225]=h("div",{style:{"max-height":"300px"},class:"language-sql vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"sql"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"update"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," T "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"set"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," c"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"c"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," where"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ID"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"2"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")])])]),h("button",{class:"collapse"})],-1)),s[226]||(s[226]=h("img",{src:"https://seazean.oss-cn-beijing.aliyuncs.com/img/DB/MySQL-update的执行流程.png",style:{zoom:"33%"}},null,-1)),s[227]||(s[227]=h("p",null,[u("流程说明：执行引擎将这行新数据读入到内存中（Buffer Pool）后，先将此次更新操作记录到 redo log buffer 里，然后更新记录。最后将 redo log 刷盘后事务处于 prepare 状态，执行器会生成这个操作的 binlog，并"),h("strong",null,"把 binlog 写入磁盘"),u("，完成提交")],-1)),s[228]||(s[228]=h("p",null,"两阶段：",-1)),s[229]||(s[229]=h("ul",null,[h("li",null,[u("Prepare 阶段：存储引擎将该事务的 "),h("strong",null,"redo 日志刷盘"),u("，并且将本事务的状态设置为 PREPARE，代表执行完成随时可以提交事务")]),h("li",null,"Commit 阶段：先将事务执行过程中产生的 binlog 刷新到硬盘，再执行存储引擎的提交工作，引擎把 redo log 改成提交状态")],-1)),s[230]||(s[230]=h("p",null,[u("存储引擎层的 redo log 和 server 层的 binlog 可以认为是一个分布式事务， 都可以用于表示事务的提交状态，而"),h("strong",null,"两阶段提交就是让这两个状态保持逻辑上的一致"),u("，也有利于主从复制，更好的保持主从数据的一致性")],-1)),s[231]||(s[231]=h("hr",null,null,-1)),s[232]||(s[232]=h("h5",{id:"数据恢复",tabindex:"-1"},[u("数据恢复 "),h("a",{class:"header-anchor",href:"#数据恢复","aria-label":'Permalink to "数据恢复"'},"​")],-1)),s[233]||(s[233]=h("p",null,"系统崩溃前没有提交的事务的 redo log 可能已经刷盘（定时线程或者 checkpoint），怎么处理崩溃恢复？",-1)),s[234]||(s[234]=h("p",null,[u("工作流程：获取 undo 链表首节点页面的 undo segement header 中的 TRX_UNDO_STATE 属性，表示当前链表的事务属性，"),h("strong",null,"事务状态是活跃（未提交）的就全部回滚"),u("，如果是 PREPARE 状态，就需要根据 binlog 的状态进行判断：")],-1)),s[235]||(s[235]=h("ul",null,[h("li",null,"如果在时刻 A 发生了崩溃（crash），由于此时 binlog 还没完成，所以需要进行回滚"),h("li",null,[u("如果在时刻 B 发生了崩溃，redo log 和 binlog 有一个共"),h("strong",null,"同的数据字段叫 XID"),u("，崩溃恢复的时候，会按顺序扫描 redo log： "),h("ul",null,[h("li",null,"如果 redo log 里面的事务是完整的，也就是已经有了 commit 标识，说明 binlog 也已经记录完整，直接从 redo log 恢复数据"),h("li",null,"如果 redo log 里面的事务只有 prepare，就根据 XID 去 binlog 中判断对应的事务是否存在并完整，如果完整可以恢复数据")])])],-1)),s[236]||(s[236]=h("p",null,"判断一个事务的 binlog 是否完整的方法：",-1)),s[237]||(s[237]=h("ul",null,[h("li",null,"statement 格式的 binlog，最后会有 COMMIT"),h("li",null,"row 格式的 binlog，最后会有一个 XID event"),h("li",null,"MySQL 5.6.2 版本以后，引入了 binlog-checksum 参数用来验证 binlog 内容的正确性（可能日志中间出错）")],-1)),s[238]||(s[238]=h("p",null,[u("参考文章："),h("a",{href:"https://time.geekbang.org/column/article/73161",target:"_blank",rel:"noreferrer"},"https://time.geekbang.org/column/article/73161")],-1)),s[239]||(s[239]=h("hr",null,null,-1)),s[240]||(s[240]=h("h4",{id:"刷脏优化",tabindex:"-1"},[u("刷脏优化 "),h("a",{class:"header-anchor",href:"#刷脏优化","aria-label":'Permalink to "刷脏优化"'},"​")],-1)),s[241]||(s[241]=h("p",null,[u("系统在进行刷脏时会占用一部分系统资源，会影响系统的性能，"),h("strong",null,"产生系统抖动")],-1)),s[242]||(s[242]=h("ul",null,[h("li",null,"一个查询要淘汰的脏页个数太多，会导致查询的响应时间明显变长"),h("li",null,"日志写满，更新全部堵住，写性能跌为 0，这种情况对敏感业务来说，是不能接受的")],-1)),s[243]||(s[243]=h("p",null,"InnoDB 刷脏页的控制策略：",-1)),s[244]||(s[244]=h("ul",null,[h("li",null,[h("code",null,"innodb_io_capacity"),u(" 参数代表磁盘的读写能力，建议设置成磁盘的 IOPS（每秒的 IO 次数）")]),h("li",null,[u("刷脏速度参考两个因素：脏页比例和 redo log 写盘速度 "),h("ul",null,[h("li",null,[u("参数 "),h("code",null,"innodb_max_dirty_pages_pct"),u(" 是脏页比例上限，默认值是 75%，InnoDB 会根据当前的脏页比例，算出一个范围在 0 到 100 之间的数字")]),h("li",null,"InnoDB 每次写入的日志都有一个序号，当前写入的序号跟 checkpoint 对应的序号之间的差值，InnoDB 根据差值算出一个范围在 0 到 100 之间的数字"),h("li",null,"两者较大的值记为 R，执行引擎按照 innodb_io_capacity 定义的能力乘以 R% 来控制刷脏页的速度")])]),h("li",null,[h("code",null,"innodb_flush_neighbors"),u(" 参数置为 1 代表控制刷脏时检查相邻的数据页，如果也是脏页就一起刷脏，并检查邻居的邻居，这个行为会一直蔓延直到不是脏页，在 MySQL 8.0 中该值的默认值是 0，不建议开启此功能")])],-1)),s[245]||(s[245]=h("hr",null,null,-1)),s[246]||(s[246]=h("h3",{id:"一致特性",tabindex:"-1"},[u("一致特性 "),h("a",{class:"header-anchor",href:"#一致特性","aria-label":'Permalink to "一致特性"'},"​")],-1)),s[247]||(s[247]=h("p",null,"一致性是指事务执行前后，数据库的完整性约束没有被破坏，事务执行的前后都是合法的数据状态。",-1)),s[248]||(s[248]=h("p",null,"数据库的完整性约束包括但不限于：实体完整性（如行的主键存在且唯一）、列完整性（如字段的类型、大小、长度要符合要求）、外键约束、用户自定义完整性（如转账前后，两个账户余额的和应该不变）",-1)),s[249]||(s[249]=h("p",null,"实现一致性的措施：",-1)),s[250]||(s[250]=h("ul",null,[h("li",null,"保证原子性、持久性和隔离性，如果这些特性无法保证，事务的一致性也无法保证"),h("li",null,"数据库本身提供保障，例如不允许向整形列插入字符串值、字符串长度不能超过列的限制等"),h("li",null,"应用层面进行保障，例如如果转账操作只扣除转账者的余额，而没有增加接收者的余额，无论数据库实现的多么完美，也无法保证状态的一致")],-1)),s[251]||(s[251]=h("hr",null,null,-1))])),"main-header":e((()=>[t(i.$slots,"main-header")])),"main-header-after":e((()=>[t(i.$slots,"main-header-after")])),"main-nav":e((()=>[t(i.$slots,"main-nav")])),"main-content-before":e((()=>[t(i.$slots,"main-content-before")])),"main-content":e((()=>[t(i.$slots,"main-content")])),"main-content-after":e((()=>[t(i.$slots,"main-content-after")])),"main-nav-before":e((()=>[t(i.$slots,"main-nav-before")])),"main-nav-after":e((()=>[t(i.$slots,"main-nav-after")])),comment:e((()=>[t(i.$slots,"comment")])),footer:e((()=>[t(i.$slots,"footer")])),aside:e((()=>[t(i.$slots,"aside")])),"aside-custom":e((()=>[t(i.$slots,"aside-custom")])),default:e((()=>[t(i.$slots,"default")])),_:3},8,["frontmatter"])}}};export{g as default,p as usePageData};
