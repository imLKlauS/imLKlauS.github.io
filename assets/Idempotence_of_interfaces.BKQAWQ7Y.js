import{_ as l}from"./ValaxyMain.vue_vue_type_style_index_0_lang.qDPz29MG.js";import{e as i,a as s,u as n}from"./chunks/vue-router.LWOaCa8B.js";import{N as a,$ as e,Q as t,R as h,V as r,W as k,u,O as p,E as o}from"./framework.DynTIHnG.js";import"./app.DSp6gQ5y.js";import"./chunks/dayjs.CORIJbU0.js";import"./chunks/vue-i18n.C2LgspBE.js";import"./chunks/@vueuse/motion.C-9h5tiT.js";import"./chunks/pinia.Dazb6ftn.js";import"./chunks/nprogress.CW4w27V0.js";import"./YunComment.vue_vue_type_style_index_0_lang.DTDk-R1k.js";import"./index.TQnGKZgq.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.71otdZiK.js";import"./post.BjIcNJpo.js";const d=i("/posts/Idempotence_of_interfaces",(async l=>JSON.parse('{"title":"接口幂等性","description":"","frontmatter":{"title":"接口幂等性","author":"imklaus","tags":["Spring Boot","token","Redis"],"categories":["Java","未分类"],"date":"2023-4-27 13:43:29","outline":"deep","excerpt_type":"html","end":false},"headers":[],"relativePath":"pages/posts/Idempotence_of_interfaces.md","lastUpdated":null}')),{lazy:(l,i)=>l.name===i.name}),E={__name:"Idempotence_of_interfaces",setup(i,{expose:E}){var g;const{data:c}=d(),y=n(),m=s(),b=Object.assign(m.meta.frontmatter||{},(null==(g=c.value)?void 0:g.frontmatter)||{});m.meta.frontmatter=b,y.currentRoute.value.data=c.value,o("valaxy:frontmatter",b),globalThis.$frontmatter=b;return E({frontmatter:{title:"接口幂等性",author:"imklaus",tags:["Spring Boot","token","Redis"],categories:["Java","未分类"],date:"2023-4-27 13:43:29",outline:"deep",excerpt_type:"html",end:!1}}),(i,s)=>{const n=l;return p(),a(n,{frontmatter:u(b)},{"main-content-md":e((()=>[s[0]||(s[0]=h("h2",{id:"一、幂等性的意义",tabindex:"-1"},[k("一、幂等性的意义 "),h("a",{class:"header-anchor",href:"#一、幂等性的意义","aria-label":'Permalink to "一、幂等性的意义"'},"​")],-1)),s[1]||(s[1]=h("h3",{id:"_1、什么是幂等性",tabindex:"-1"},[h("strong",null,"1、什么是幂等性"),k(),h("a",{class:"header-anchor",href:"#_1、什么是幂等性","aria-label":'Permalink to "**1、什么是幂等性**"'},"​")],-1)),s[2]||(s[2]=h("ul",null,[h("li",null,"看一下维基百科怎么说的：")],-1)),s[3]||(s[3]=h("figure",null,[h("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20230429205227388.png",alt:"image-20230429205227388",loading:"lazy",decoding:"async",class:"lazy"})],-1)),s[4]||(s[4]=h("ul",null,[h("li",null,[h("strong",null,"接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的"),k("，不会因为多次点击而产生了副作用；比如说支付场景，用户购买了商品支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额返发现多扣钱了，流水记录也变成了两条…，这就没有保证接口的幂等性。")])],-1)),r(" more "),s[5]||(s[5]=h("blockquote",null,[h("ul",null,[h("li",null,"幂等是一个数学与计算机学概念，在数学中某一元运算为幂等时，其作用在任一元素两次后会和其作用一次的结果相同。"),h("li",null,"在计算机中编程中，一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数或幂等方法是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。")])],-1)),s[6]||(s[6]=h("h3",{id:"_2、什么是接口幂等性",tabindex:"-1"},[h("strong",null,"2、什么是接口幂等性"),k(),h("a",{class:"header-anchor",href:"#_2、什么是接口幂等性","aria-label":'Permalink to "**2、什么是接口幂等性**"'},"​")],-1)),s[7]||(s[7]=h("ul",null,[h("li",null,"在HTTP/1.1中，对幂等性进行了定义。它描述了一次和多次请求某一个资源对于资源本身应该具有同样的结果（网络超时等问题除外），即第一次请求的时候对资源产生了副作用，但是以后的多次请求都不会再对资源产生副作用。"),h("li",null,"这里的副作用是不会对结果产生破坏或者产生不可预料的结果。也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。")],-1)),s[8]||(s[8]=h("h3",{id:"_3、为什么需要实现幂等性",tabindex:"-1"},[h("strong",null,"3、为什么需要实现幂等性"),k(),h("a",{class:"header-anchor",href:"#_3、为什么需要实现幂等性","aria-label":'Permalink to "**3、为什么需要实现幂等性**"'},"​")],-1)),s[9]||(s[9]=h("p",null,"在接口调用时一般情况下都能正常返回信息不会重复提交，不过在遇见以下情况时可以就会出现问题，如：",-1)),s[10]||(s[10]=h("ol",null,[h("li",null,[h("strong",null,"前端重复提交表单："),k(" 在填写一些表格时候，用户填写完成提交，很多时候会因网络波动没有及时对用户做出提交成功响应，致使用户认为没有成功提交，然后一直点提交按钮，这时就会发生重复提交表单请求。")]),h("li",null,[h("strong",null,"用户恶意进行刷单："),k(" 例如在实现用户投票这种功能时，如果用户针对一个用户进行重复提交投票，这样会导致接口接收到用户重复提交的投票信息，这样会使投票结果与事实严重不符。")]),h("li",null,[h("strong",null,"接口超时重复提交："),k(" 很多时候 HTTP 客户端工具都默认开启超时重试的机制，尤其是第三方调用接口时候，为了防止网络波动超时等造成的请求失败，都会添加重试机制，导致一个请求提交多次。")]),h("li",null,[h("strong",null,"消息进行重复消费："),k(" 当使用 MQ 消息中间件时候，如果发生消息中间件出现错误未及时提交消费信息，导致发生重复消费。")])],-1)),s[11]||(s[11]=h("blockquote",null,[h("p",null,"使用幂等性最大的优势在于使接口保证任何幂等性操作，免去因重试等造成系统产生的未知的问题。")],-1)),s[12]||(s[12]=h("h3",{id:"_4、引入幂等性后对系统的影响",tabindex:"-1"},[h("strong",null,"4、引入幂等性后对系统的影响"),k(),h("a",{class:"header-anchor",href:"#_4、引入幂等性后对系统的影响","aria-label":'Permalink to "**4、引入幂等性后对系统的影响**"'},"​")],-1)),s[13]||(s[13]=h("p",null,"幂等性是为了简化客户端逻辑处理，能放置重复提交等操作，但却增加了服务端的逻辑复杂性和成本，其主要是：",-1)),s[14]||(s[14]=h("ol",null,[h("li",null,"把并行执行的功能改为串行执行，降低了执行效率。"),h("li",null,"增加了额外控制幂等的业务逻辑，复杂化了业务功能；")],-1)),s[15]||(s[15]=h("blockquote",null,[h("p",null,"所以在使用时候需要考虑是否引入幂等性的必要性，根据实际业务场景具体分析，除了业务上的特殊要求外，一般情况下不需要引入的接口幂等性。")],-1)),s[16]||(s[16]=h("h2",{id:"二、restful-api-接口的幂等性",tabindex:"-1"},[k("二、Restful API 接口的幂等性 "),h("a",{class:"header-anchor",href:"#二、restful-api-接口的幂等性","aria-label":'Permalink to "二、Restful API 接口的幂等性"'},"​")],-1)),s[17]||(s[17]=h("p",null,"现在流行的 Restful 推荐的几种 HTTP 接口方法中，分别存在幂等行与不能保证幂等的方法，如下：",-1)),s[18]||(s[18]=h("ol",null,[h("li",null,"√ 满足幂等"),h("li",null,"x 不满足幂等"),h("li",null,"- 可能满足也可能不满足幂等，根据实际业务逻辑有关")],-1)),s[19]||(s[19]=h("blockquote",null,[h("p",null,"Get"),h("p",null,"√"),h("p",null,"Get 方法用于获取资源。其一般不会也不应当对系统资源进行改变，所以是幂等的。")],-1)),s[20]||(s[20]=h("blockquote",null,[h("p",null,"Post"),h("p",null,"×"),h("p",null,"Post 方法一般用于创建新的资源。其每次执行都会新增数据，所以不是幂等的。")],-1)),s[21]||(s[21]=h("blockquote",null,[h("p",null,"Put"),h("p",null,"-"),h("p",null,"Put 方法一般用于修改资源。该操作则分情况来判断是不是满足幂等，更新操作中直接根据某个值进行更新，也能保持幂等。不过执行累加操作的更新是非幂等。")],-1)),s[22]||(s[22]=h("blockquote",null,[h("p",null,"Delete"),h("p",null,"-"),h("p",null,"Delete 方法一般用于删除资源。该操作则分情况来判断是不是满足幂等，当根据唯一值进行删除时，删除同一个数据多次执行效果一样。不过需要注意，带查询条件的删除则就不一定满足幂等了。例如在根据条件删除一批数据后，这时候新增加了一条数据也满足条件，然后又执行了一次删除，那么将会导致新增加的这条满足条件数据也被删除。")],-1)),s[23]||(s[23]=h("h2",{id:"三、哪些情况需要防止",tabindex:"-1"},[k("三、哪些情况需要防止 "),h("a",{class:"header-anchor",href:"#三、哪些情况需要防止","aria-label":'Permalink to "三、哪些情况需要防止"'},"​")],-1)),s[24]||(s[24]=h("ul",null,[h("li",null,"用户多次点击按钮"),h("li",null,"用户页面回退再次提交"),h("li",null,"微服务互相调用，由于网络问题，导致请求失败。feign 触发重试机制其他业务情况")],-1)),s[25]||(s[25]=h("h3",{id:"_1、前端重复提交",tabindex:"-1"},[k("1、前端重复提交 "),h("a",{class:"header-anchor",href:"#_1、前端重复提交","aria-label":'Permalink to "1、前端重复提交"'},"​")],-1)),s[26]||(s[26]=h("ul",null,[h("li",null,"用户注册，用户创建商品等操作，前端都会提交一些数据给后台服务，后台需要根据用户提交的数据在数据库中创建记录。如果用户不小心多点了几次，后端收到了好几次提交，这时就会在数据库中重复创建了多条记录。这就是接口没有幂等性带来的 bug。")],-1)),s[27]||(s[27]=h("h3",{id:"_2、接口超时重试",tabindex:"-1"},[k("2、接口超时重试 "),h("a",{class:"header-anchor",href:"#_2、接口超时重试","aria-label":'Permalink to "2、接口超时重试"'},"​")],-1)),s[28]||(s[28]=h("ul",null,[h("li",null,"对于给第三方调用的接口，有可能会因为网络原因而调用失败，这时，一般在设计的时候会对接口调用加上失败重试的机制。如果第一次调用已经执行了一半时，发生了网络异常。这时再次调用时就会因为脏数据的存在而出现调用异常。")],-1)),s[29]||(s[29]=h("h3",{id:"_3、消息重复消费",tabindex:"-1"},[k("3、消息重复消费 "),h("a",{class:"header-anchor",href:"#_3、消息重复消费","aria-label":'Permalink to "3、消息重复消费"'},"​")],-1)),s[30]||(s[30]=h("ul",null,[h("li",null,"在使用消息中间件来处理消息队列，且手动 ack 确认消息被正常消费时。如果消费者突然断开连接，那么已经执行了一半的消息会重新放回队列。"),h("li",null,"当消息被其他消费者重新消费时，如果没有幂等性，就会导致消息重复消费时结果异常，如数据库重复数据，数据库数据冲突，资源重复等。")],-1)),s[31]||(s[31]=h("h2",{id:"四、什么情况下需要幂等",tabindex:"-1"},[k("四、什么情况下需要幂等 "),h("a",{class:"header-anchor",href:"#四、什么情况下需要幂等","aria-label":'Permalink to "四、什么情况下需要幂等"'},"​")],-1)),s[32]||(s[32]=h("p",null,"以 SQL 为例，有些操作是天然幂等的。",-1)),s[33]||(s[33]=h("ul",null,[h("li",null,[h("p",null,[h("code",null,"SELECT * FROM table WHER id=?"),k("，无论执行多少次都不会改变状态，是天然的幂等。")])]),h("li",null,[h("p",null,[h("code",null,"UPDATE tab1 SET col1=1 WHERE col2=2"),k("，无论执行成功多少次状态都是一致的，也是幂等操作。")])]),h("li",null,[h("p",null,[h("code",null,"delete from user where userid=1"),k("，多次操作，结果一样，具备幂等性")])]),h("li",null,[h("p",null,[h("code",null,"insert into user(userid,name) values(1,'a')"),k(" 如 userid 为唯一主键，即重复操作上面的业务，只会插入一条用户数据，具备幂等性。")])])],-1)),s[34]||(s[34]=h("hr",null,null,-1)),s[35]||(s[35]=h("ul",null,[h("li",null,[h("code",null,"UPDATE tab1 SET col1=col1+1 WHERE col2=2"),k("，每次执行的结果都会发生变化，不是幂等的。")]),h("li",null,[h("code",null,"insert into user(userid,name) values(1,'a')"),k(" 如 userid 不是主键，可以重复，那上面业务多次操作，数据都会新增多条，不具备幂等性。")])],-1)),s[36]||(s[36]=h("h2",{id:"五、幂等解决方案",tabindex:"-1"},[k("五、幂等解决方案 "),h("a",{class:"header-anchor",href:"#五、幂等解决方案","aria-label":'Permalink to "五、幂等解决方案"'},"​")],-1)),s[37]||(s[37]=h("h3",{id:"_1、token-机制",tabindex:"-1"},[h("strong",null,"1、token 机制"),k(),h("a",{class:"header-anchor",href:"#_1、token-机制","aria-label":'Permalink to "**1、token 机制**"'},"​")],-1)),s[38]||(s[38]=h("ul",null,[h("li",null,[h("p",null,"1、服务端提供了发送 token 的接口。我们在分析业务的时候，哪些业务是存在幂等问题的，就必须在执行业务前，先去获取 token，服务器会把 token 保存到 redis 中。")]),h("li",null,[h("p",null,"2、然后调用业务接口请求时，把 token 携带过去，一般放在请求头部。")]),h("li",null,[h("p",null,"3、服务器判断 token 是否存在 redis 中，存在表示第一次请求，然后删除 token,继续执行业务。")]),h("li",null,[h("p",null,"4、如果判断 token 不存在 redis 中，就表示是重复操作，直接返回重复标记给 client，这样就保证了业务代码，不被重复执行。")]),h("li",null,[h("p",null,"危险性："),h("ul",null,[h("li",null,[h("p",null,"1、先删除 token 还是后删除 token；"),h("ul",null,[h("li",null,"(1)、先删除可能导致，业务确实没有执行，重试还带上之前 token，由于防重设计导致，请求还是不能执行。"),h("li",null,"(2)、后删除可能导致，业务处理成功，但是服务闪断，出现超时，没有删除 token，别人继续重试，导致业务被执行两边"),h("li",null,"(3)、我们最好设计为先删除 token，如果业务调用失败，就重新获取 token 再次请求。")])]),h("li",null,[h("p",null,"2、Token 获取、比较和删除必须是原子性"),h("ul",null,[h("li",null,"(1)、redis.get(token) 、token.equals、redis.del(token)如果这两个操作不是原子，可能导致，高并发下，都 get 到同样的数据，判断都成功，继续业务并发执行"),h("li",null,"(2)、可以在 redis 使用 lua 脚本完成这个操作")]),h("div",{style:{"max-height":"300px"},class:"language-shell vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"shell"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"if"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," redis.call("),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"'get'"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},","),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," KEYS[1]"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") == ARGV[1] "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"then"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," return"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," redis.call"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"'del'"),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},","),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," KEYS[1]"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"else"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," return"),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 0"),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," end")])])]),h("button",{class:"collapse"})])])])])],-1)),s[39]||(s[39]=h("blockquote",null,[h("ul",null,[h("li",null,[h("p",null,"通过token 机制实现接口的幂等性,这是一种比较通用性的实现方法。")]),h("li",null,[h("p",null,"示意图如下：")])]),h("figure",null,[h("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20230429171130711.png",alt:"image-20230429171130711",loading:"lazy",decoding:"async",class:"lazy"})]),h("ul",null,[h("li",null,[h("p",null,"具体流程步骤："),h("ul",null,[h("li",null,[h("p",null,"1客户端会先发送一个请求去获取 token，服务端会生成一个全局唯一的 ID 作为 token 保存在 redis 中，同时把这个 ID 返回给客户端")]),h("li",null,[h("p",null,"2客户端第二次调用业务请求的时候必须携带这个 token")]),h("li",null,[h("p",null,"3服务端会校验这个 token，如果校验成功，则执行业务，并删除 redis 中的 token")]),h("li",null,[h("p",null,"4如果校验失败，说明 redis 中已经没有对应的 token，则表示重复操作，直接返回指定的结果给客户端")])])]),h("li",null,[h("p",null,"注意："),h("ul",null,[h("li",null,[h("p",null,"1对 redis 中是否存在 token 以及删除的代码逻辑建议用 Lua 脚本实现，保证原子性")]),h("li",null,[h("p",null,"2全局唯一 ID 可以用百度的 uid-generator、美团的 Leaf 去生成")])])])])],-1)),s[40]||(s[40]=h("h3",{id:"_2、各种锁机制",tabindex:"-1"},[h("strong",null,"2、各种锁机制"),k(),h("a",{class:"header-anchor",href:"#_2、各种锁机制","aria-label":'Permalink to "**2、各种锁机制**"'},"​")],-1)),s[41]||(s[41]=h("h4",{id:"_1-、数据库悲观锁",tabindex:"-1"},[h("strong",null,"1）、数据库悲观锁"),k(),h("a",{class:"header-anchor",href:"#_1-、数据库悲观锁","aria-label":'Permalink to "**1）、数据库悲观锁**"'},"​")],-1)),s[42]||(s[42]=h("p",null,[h("code",null,"select * from xxxx where id = 1 for update;"),k(" 悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，需要根据实际情况选用。 另外要注意的是，id 字段一定是主键或者唯一索引，不然可能造成锁表的结果，处理起来会 非常麻烦。")],-1)),s[43]||(s[43]=h("h4",{id:"_2-、数据库乐观锁",tabindex:"-1"},[h("strong",null,"2）、数据库乐观锁"),k(),h("a",{class:"header-anchor",href:"#_2-、数据库乐观锁","aria-label":'Permalink to "**2）、数据库乐观锁**"'},"​")],-1)),s[44]||(s[44]=h("p",null,"这种方法适合在更新的场景中：",-1)),s[45]||(s[45]=h("p",null,[h("code",null,"update t_goods set count = count -1 , version = version + 1 where good_id=2 and version = 1")],-1)),s[46]||(s[46]=h("ul",null,[h("li",null,"根据 version 版本，也就是在操作库存前先获取当前商品的 version 版本号，然后操作的时候带上此 version 号。我们梳理下，我们第一次操作库存时，得到 version 为 1，调用库存服务version 变成了 2；但返回给订单服务出现了问题，订单服务又一次发起调用库存服务，当订单服务传如的 version 还是 1，再执行上面的 sql 语句时，就不会执行；因为 version 已经变为 2 了，where 条件就不成立。这样就保证了不管调用几次，只会真正的处理一次。"),h("li",null,"乐观锁主要使用于处理读多写少的问题")],-1)),s[47]||(s[47]=h("h4",{id:"_3-、业务层分布式锁",tabindex:"-1"},[h("strong",null,"3）、业务层分布式锁"),k(),h("a",{class:"header-anchor",href:"#_3-、业务层分布式锁","aria-label":'Permalink to "**3）、业务层分布式锁**"'},"​")],-1)),s[48]||(s[48]=h("p",null,"如果多个机器可能在同一时间同时处理相同的数据，比如多台机器定时任务都拿到了相同数 据处理，我们就可以加分布式锁，锁定此数据，处理完成后释放锁。获取到锁的必须先判断 这个数据是否被处理过。",-1)),s[49]||(s[49]=h("h3",{id:"_3、各种唯一约束",tabindex:"-1"},[h("strong",null,"3、各种唯一约束"),k(),h("a",{class:"header-anchor",href:"#_3、各种唯一约束","aria-label":'Permalink to "**3、各种唯一约束**"'},"​")],-1)),s[50]||(s[50]=h("h4",{id:"_1-、数据库唯一约束",tabindex:"-1"},[h("strong",null,"1）、数据库唯一约束"),k(),h("a",{class:"header-anchor",href:"#_1-、数据库唯一约束","aria-label":'Permalink to "**1）、数据库唯一约束**"'},"​")],-1)),s[51]||(s[51]=h("ul",null,[h("li",null,"插入数据，应该按照唯一索引进行插入，比如订单号，相同的订单就不可能有两条记录插入。我们在数据库层面防止重复。"),h("li",null,"这个机制是利用了数据库的主键唯一约束的特性，解决了在 insert 场景时幂等问题。但主键的要求不是自增的主键，这样就需要业务生成全局唯一的主键。"),h("li",null,"如果是分库分表场景下，路由规则要保证相同请求下，落地在同一个数据库和同一表中，要不然数据库主键约束就不起效果了，因为是不同的数据库和表主键不相关。")],-1)),s[52]||(s[52]=h("blockquote",null,[h("p",null,"这种实现方式是利用 mysql 唯一索引的特性。"),h("p",null,"示意图如下："),h("figure",null,[h("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20230429171314375.png",alt:"image-20230429171314375",loading:"lazy",decoding:"async",class:"lazy"})]),h("ul",null,[h("li",null,[k("具体流程步骤： "),h("ul",null,[h("li",null,"1建立一张去重表，其中某个字段需要建立唯一索引"),h("li",null,"2客户端去请求服务端，服务端会将这次请求的一些信息插入这张去重表中"),h("li",null,"3因为表中某个字段带有唯一索引，如果插入成功，证明表中没有这次请求的信息，则执行后续的业务逻辑"),h("li",null,"4如果插入失败，则代表已经执行过当前请求，直接返回")])])])],-1)),s[53]||(s[53]=h("h4",{id:"_2-、redis-set-防重",tabindex:"-1"},[h("strong",null,"2）、redis set 防重"),k(),h("a",{class:"header-anchor",href:"#_2-、redis-set-防重","aria-label":'Permalink to "**2）、redis set 防重**"'},"​")],-1)),s[54]||(s[54]=h("p",null,"很多数据需要处理，只能被处理一次，比如我们可以计算数据的 MD5 将其放入 redis 的 set，每次处理数据，先看这个 MD5 是否已经存在，存在就不处理。",-1)),s[55]||(s[55]=h("blockquote",null,[h("ul",null,[h("li",null,"这种实现方式是基于 SETNX 命令实现的"),h("li",null,"SETNX key value：将 key 的值设为 value ，当且仅当 key 不存在。若给定的 key 已经存在，则 SETNX 不做任何动作。"),h("li",null,"该命令在设置成功时返回 1，设置失败时返回 0。")]),h("p",null,"示意图如下："),h("figure",null,[h("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20230429171445789.png",alt:"image-20230429171445789",loading:"lazy",decoding:"async",class:"lazy"})]),h("ul",null,[h("li",null,[k("具体流程步骤： "),h("ul",null,[h("li",null,"1客户端先请求服务端，会拿到一个能代表这次请求业务的唯一字段"),h("li",null,"2将该字段以 SETNX 的方式存入 redis 中，并根据业务设置相应的超时时间"),h("li",null,"3如果设置成功，证明这是第一次请求，则执行后续的业务逻辑"),h("li",null,"4如果设置失败，则代表已经执行过当前请求，直接返回")])])])],-1)),s[56]||(s[56]=h("h3",{id:"_4、防重表",tabindex:"-1"},[h("strong",null,"4、防重表"),k(),h("a",{class:"header-anchor",href:"#_4、防重表","aria-label":'Permalink to "**4、防重表**"'},"​")],-1)),s[57]||(s[57]=h("ul",null,[h("li",null,[h("p",null,"使用订单号 orderNo 做为去重表的唯一索引，把唯一索引插入去重表，再进行业务操作，且他们在同一个事务中。这个保证了重复请求时，因为去重表有唯一约束，导致请求失败，避免了幂等问题。这里要注意的是，去重表和业务表应该在同一库中，这样就保证了在同一个事务，即使业务操作失败了，也会把去重表的数据回滚。这个很好的保证了数据一致性。")]),h("li",null,[h("p",null,"之前说的 redis 防重也算")])],-1)),s[58]||(s[58]=h("h3",{id:"_5、全局请求唯一-id",tabindex:"-1"},[h("strong",null,"5、全局请求唯一 id"),k(),h("a",{class:"header-anchor",href:"#_5、全局请求唯一-id","aria-label":'Permalink to "**5、全局请求唯一 id**"'},"​")],-1)),s[59]||(s[59]=h("ul",null,[h("li",null,"调用接口时，生成一个唯一 id，redis 将数据保存到集合中（去重），存在即处理过。"),h("li",null,"可以使用 nginx 设置每一个请求的唯一 id；"),h("li",null,[h("code",null,"proxy_set_header X-Request-Id $request_id;")])],-1)),s[60]||(s[60]=h("h3",{id:"_6、总结",tabindex:"-1"},[k("6、总结 "),h("a",{class:"header-anchor",href:"#_6、总结","aria-label":'Permalink to "6、总结"'},"​")],-1)),s[61]||(s[61]=h("blockquote",null,[h("ul",null,[h("li",null,"这几种实现幂等的方式其实都是大同小异的，类似的还有使用状态机、悲观锁、乐观锁的方式来实现，都是比较简单的。"),h("li",null,"总之，当你去设计一个接口的时候，幂等都是首要考虑的问题，特别是当你负责设计转账、支付这种涉及到 money 的接口，你要格外注意喽！")])],-1)),s[62]||(s[62]=h("h2",{id:"六、如何实现幂等性",tabindex:"-1"},[k("六、如何实现幂等性 "),h("a",{class:"header-anchor",href:"#六、如何实现幂等性","aria-label":'Permalink to "六、如何实现幂等性"'},"​")],-1)),s[63]||(s[63]=h("h3",{id:"方案一-数据库唯一主键",tabindex:"-1"},[h("strong",null,"方案一：数据库唯一主键"),k(),h("a",{class:"header-anchor",href:"#方案一-数据库唯一主键","aria-label":'Permalink to "**方案一：数据库唯一主键**"'},"​")],-1)),s[64]||(s[64]=h("p",null,[h("strong",null,"方案描述")],-1)),s[65]||(s[65]=h("p",null,"数据库唯一主键的实现主要是利用数据库中主键唯一约束的特性，一般来说唯一主键比较适用于“插入”时的幂等性，其能保证一张表中只能存在一条带该唯一主键的记录。",-1)),s[66]||(s[66]=h("p",null,"使用数据库唯一主键完成幂等性时需要注意的是，该主键一般来说并不是使用数据库中自增主键，而是使用分布式 ID 充当主键（可以参考 Java 中分布式 ID 的设计方案 这篇文章），这样才能能保证在分布式环境下 ID 的全局唯一性。",-1)),s[67]||(s[67]=h("p",null,[h("strong",null,"适用操作：")],-1)),s[68]||(s[68]=h("ul",null,[h("li",null,"插入操作"),h("li",null,"删除操作")],-1)),s[69]||(s[69]=h("p",null,[h("strong",null,"使用限制：")],-1)),s[70]||(s[70]=h("ul",null,[h("li",null,"需要生成全局唯一主键 ID；")],-1)),s[71]||(s[71]=h("p",null,[h("strong",null,"主要流程：")],-1)),s[72]||(s[72]=h("figure",null,[h("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20230427153539838.png",alt:"image-20230427153539838",loading:"lazy",decoding:"async",class:"lazy"})],-1)),s[73]||(s[73]=h("p",null,"主要流程：",-1)),s[74]||(s[74]=h("ol",null,[h("li",null,"① 客户端执行创建请求，调用服务端接口。"),h("li",null,"② 服务端执行业务逻辑，生成一个分布式 ID，将该 ID 充当待插入数据的主键，然后执数据插入操作，运行对应的 SQL 语句。"),h("li",null,"③ 服务端将该条数据插入数据库中，如果插入成功则表示没有重复调用接口。如果抛出主键重复异常，则表示数据库中已经存在该条记录，返回错误信息到客户端。")],-1)),s[75]||(s[75]=h("h3",{id:"方案二-数据库乐观锁",tabindex:"-1"},[h("strong",null,"方案二：数据库乐观锁"),k(),h("a",{class:"header-anchor",href:"#方案二-数据库乐观锁","aria-label":'Permalink to "**方案二：数据库乐观锁**"'},"​")],-1)),s[76]||(s[76]=h("p",null,[h("strong",null,"方案描述：")],-1)),s[77]||(s[77]=h("p",null,"数据库乐观锁方案一般只能适用于执行“更新操作”的过程，我们可以提前在对应的数据表中多添加一个字段，充当当前数据的版本标识。这样每次对该数据库该表的这条数据执行更新时，都会将该版本标识作为一个条件，值为上次待更新数据中的版本标识的值。",-1)),s[78]||(s[78]=h("p",null,[h("strong",null,"适用操作：")],-1)),s[79]||(s[79]=h("ul",null,[h("li",null,"更新操作")],-1)),s[80]||(s[80]=h("p",null,[h("strong",null,"使用限制：")],-1)),s[81]||(s[81]=h("ul",null,[h("li",null,"需要数据库对应业务表中添加额外字段；")],-1)),s[82]||(s[82]=h("p",null,[h("strong",null,"描述示例：")],-1)),s[83]||(s[83]=h("figure",null,[h("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20230427153641136.png",alt:"image-20230427153641136",loading:"lazy",decoding:"async",class:"lazy"})],-1)),s[84]||(s[84]=h("p",null,"例如，存在如下的数据表中：",-1)),s[85]||(s[85]=h("p",null,"1",-1)),s[86]||(s[86]=h("p",null,"小米手机",-1)),s[87]||(s[87]=h("p",null,"1000",-1)),s[88]||(s[88]=h("p",null,"2",-1)),s[89]||(s[89]=h("p",null,"苹果手机",-1)),s[90]||(s[90]=h("p",null,"2500",-1)),s[91]||(s[91]=h("p",null,"3",-1)),s[92]||(s[92]=h("p",null,"华为手机",-1)),s[93]||(s[93]=h("p",null,"1600",-1)),s[94]||(s[94]=h("blockquote",null,[h("p",null,"为了每次执行更新时防止重复更新，确定更新的一定是要更新的内容，我们通常都会添加一个 version 字段记录当前的记录版本，这样在更新时候将该值带上，那么只要执行更新操作就能确定一定更新的是某个对应版本下的信息。")],-1)),s[95]||(s[95]=h("p",null,"1",-1)),s[96]||(s[96]=h("p",null,"小米手机",-1)),s[97]||(s[97]=h("p",null,"1000",-1)),s[98]||(s[98]=h("p",null,"10",-1)),s[99]||(s[99]=h("p",null,"2",-1)),s[100]||(s[100]=h("p",null,"苹果手机",-1)),s[101]||(s[101]=h("p",null,"2500",-1)),s[102]||(s[102]=h("p",null,"21",-1)),s[103]||(s[103]=h("p",null,"3",-1)),s[104]||(s[104]=h("p",null,"华为手机",-1)),s[105]||(s[105]=h("p",null,"1600",-1)),s[106]||(s[106]=h("p",null,"5",-1)),s[107]||(s[107]=h("blockquote",null,[h("p",null,"这样每次执行更新时候，都要指定要更新的版本号，如下操作就能准确更新 version=5 的信息："),h("p",null,[h("code",null,"UPDATE my_table SET price=price+50,version=version+1 WHERE id=1 AND version=5")]),h("p",null,"上面 WHERE 后面跟着条件 id=1 AND version=5 被执行后，id=1 的 version 被更新为 6，所以如果重复执行该条 SQL 语句将不生效，因为 id=1 AND version=5 的数据已经不存在，这样就能保住更新的幂等，多次更新对结果不会产生影响。")],-1)),s[108]||(s[108]=h("h3",{id:"方案三-防重-token-令牌",tabindex:"-1"},[h("strong",null,"方案三：防重 Token 令牌"),k(),h("a",{class:"header-anchor",href:"#方案三-防重-token-令牌","aria-label":'Permalink to "**方案三：防重 Token 令牌**"'},"​")],-1)),s[109]||(s[109]=h("p",null,[h("strong",null,"方案描述：")],-1)),s[110]||(s[110]=h("p",null,"针对客户端连续点击或者调用方的超时重试等情况，例如提交订单，此种操作就可以用 Token 的机制实现防止重复提交。简单的说就是调用方在调用接口的时候先向后端请求一个全局 ID（Token），请求的时候携带这个全局 ID 一起请求（Token 最好将其放到 Headers 中），后端需要对这个 Token 作为 Key，用户信息作为 Value 到 Redis 中进行键值内容校验，如果 Key 存在且 Value 匹配就执行删除命令，然后正常执行后面的业务逻辑。如果不存在对应的 Key 或 Value 不匹配就返回重复执行的错误信息，这样来保证幂等操作。",-1)),s[111]||(s[111]=h("p",null,[h("strong",null,"适用操作：")],-1)),s[112]||(s[112]=h("ol",null,[h("li",null,"插入操作"),h("li",null,"更新操作"),h("li",null,"删除操作")],-1)),s[113]||(s[113]=h("p",null,[h("strong",null,"使用限制：")],-1)),s[114]||(s[114]=h("ol",null,[h("li",null,"需要生成全局唯一 Token 串；"),h("li",null,"需要使用第三方组件 Redis 进行数据效验；")],-1)),s[115]||(s[115]=h("p",null,[h("strong",null,"主要流程：")],-1)),s[116]||(s[116]=h("figure",null,[h("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20230427153655823.png",alt:"image-20230427153655823",loading:"lazy",decoding:"async",class:"lazy"})],-1)),s[117]||(s[117]=h("ol",null,[h("li",null,"① 服务端提供获取 Token 的接口，该 Token 可以是一个序列号，也可以是一个分布式 ID 或者 UUID 串。"),h("li",null,"② 客户端调用接口获取 Token，这时候服务端会生成一个 Token 串。"),h("li",null,"③ 然后将该串存入 Redis 数据库中，以该 Token 作为 Redis 的键（注意设置过期时间）。"),h("li",null,"④ 将 Token 返回到客户端，客户端拿到后应存到表单隐藏域中。"),h("li",null,"⑤ 客户端在执行提交表单时，把 Token 存入到 Headers 中，执行业务请求带上该 Headers。"),h("li",null,"⑥ 服务端接收到请求后从 Headers 中拿到 Token，然后根据 Token 到 Redis 中查找该 key 是否存在。"),h("li",null,"⑦ 服务端根据 Redis 中是否存该 key 进行判断，如果存在就将该 key 删除，然后正常执行业务逻辑。如果不存在就抛异常，返回重复提交的错误信息。")],-1)),s[118]||(s[118]=h("blockquote",null,[h("p",null,"注意，在并发情况下，执行 Redis 查找数据与删除需要保证原子性，否则很可能在并发下无法保证幂等性。其实现方法可以使用分布式锁或者使用 Lua 表达式来注销查询与删除操作。")],-1)),s[119]||(s[119]=h("h3",{id:"方案四、下游传递唯一序列号",tabindex:"-1"},[h("strong",null,"方案四、下游传递唯一序列号"),k(),h("a",{class:"header-anchor",href:"#方案四、下游传递唯一序列号","aria-label":'Permalink to "**方案四、下游传递唯一序列号**"'},"​")],-1)),s[120]||(s[120]=h("p",null,[h("strong",null,"方案描述：")],-1)),s[121]||(s[121]=h("ul",null,[h("li",null,[h("p",null,"所谓请求序列号，其实就是每次向服务端请求时候附带一个短时间内唯一不重复的序列号，该序列号可以是一个有序 ID，也可以是一个订单号，一般由下游生成，在调用上游服务端接口时附加该序列号和用于认证的 ID。")]),h("li",null,[h("p",null,"当上游服务器收到请求信息后拿取该 序列号 和下游 认证ID 进行组合，形成用于操作 Redis 的 Key，然后到 Redis 中查询是否存在对应的 Key 的键值对，根据其结果："),h("ol",null,[h("li",null,"如果存在，就说明已经对该下游的该序列号的请求进行了业务处理，这时可以直接响应重复请求的错误信息。"),h("li",null,"如果不存在，就以该 Key 作为 Redis 的键，以下游关键信息作为存储的值（例如下游商传递的一些业务逻辑信息），将该键值对存储到 Redis 中 ，然后再正常执行对应的业务逻辑即可。")])])],-1)),s[122]||(s[122]=h("p",null,[h("strong",null,"适用操作：")],-1)),s[123]||(s[123]=h("ol",null,[h("li",null,"插入操作"),h("li",null,"更新操作"),h("li",null,"删除操作")],-1)),s[124]||(s[124]=h("p",null,[h("strong",null,"使用限制：")],-1)),s[125]||(s[125]=h("ol",null,[h("li",null,"要求第三方传递唯一序列号；"),h("li",null,"需要使用第三方组件 Redis 进行数据效验；")],-1)),s[126]||(s[126]=h("p",null,[h("strong",null,"主要流程：")],-1)),s[127]||(s[127]=h("figure",null,[h("img",{src:"https://gcore.jsdelivr.net/gh/imLKlauS/blog-picture@main/blogs/image-20230427153719484.png",alt:"image-20230427153719484",loading:"lazy",decoding:"async",class:"lazy"})],-1)),s[128]||(s[128]=h("p",null,"主要步骤：",-1)),s[129]||(s[129]=h("ol",null,[h("li",null,"① 下游服务生成分布式 ID 作为序列号，然后执行请求调用上游接口，并附带“唯一序列号”与请求的“认证凭据ID”。"),h("li",null,"② 上游服务进行安全效验，检测下游传递的参数中是否存在“序列号”和“凭据ID”。"),h("li",null,"③ 上游服务到 Redis 中检测是否存在对应的“序列号”与“认证ID”组成的 Key，如果存在就抛出重复执行的异常信息，然后响应下游对应的错误信息。如果不存在就以该“序列号”和“认证ID”组合作为 Key，以下游关键信息作为 Value，进而存储到 Redis 中，然后正常执行接来来的业务逻辑。")],-1)),s[130]||(s[130]=h("blockquote",null,[h("p",null,"上面步骤中插入数据到 Redis 一定要设置过期时间。这样能保证在这个时间范围内，如果重复调用接口，则能够进行判断识别。如果不设置过期时间，很可能导致数据无限量的存入 Redis，致使 Redis 不能正常工作。")],-1)),s[131]||(s[131]=h("h2",{id:"七、在项目中实现接口幂等",tabindex:"-1"},[k("七、在项目中实现接口幂等 "),h("a",{class:"header-anchor",href:"#七、在项目中实现接口幂等","aria-label":'Permalink to "七、在项目中实现接口幂等"'},"​")],-1)),s[132]||(s[132]=h("p",null,"这里使用防重 Token 令牌方案，该方案能保证在不同请求动作下的幂等性，实现逻辑可以看上面写的”防重 Token 令牌”方案，接下来写下实现这个逻辑的代码。",-1)),s[133]||(s[133]=h("h3",{id:"_1、maven-引入相关依赖",tabindex:"-1"},[h("strong",null,"1、Maven 引入相关依赖"),k(),h("a",{class:"header-anchor",href:"#_1、maven-引入相关依赖","aria-label":'Permalink to "**1、Maven 引入相关依赖**"'},"​")],-1)),s[134]||(s[134]=h("p",null,[k("这里使用 Maven 工具管理依赖，这里在 "),h("a",{href:"http://pom.xml/",target:"_blank",rel:"noreferrer"},"pom.xml"),k(" 中引入 SpringBoot、Redis、lombok 相关依赖。")],-1)),s[135]||(s[135]=h("div",{style:{"max-height":"300px"},class:"language-xml vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"xml"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"\t\x3c!--springboot web--\x3e")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    <"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"dependency"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      <"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"groupId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">org.springframework.boot</"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"groupId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      <"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"artifactId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">spring-boot-starter-web</"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"artifactId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    </"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"dependency"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"}),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    \x3c!--springboot data redis--\x3e")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    <"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"dependency"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"     <"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"groupId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">org.springframework.boot</"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"groupId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"     <"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"artifactId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">spring-boot-starter-data-redis</"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"artifactId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    </"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"dependency"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"}),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"\t\x3c!--lombok--\x3e")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    <"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"dependency"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      <"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"groupId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">org.projectlombok</"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"groupId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      <"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"artifactId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">lombok</"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"artifactId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    </"),h("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"dependency"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")])])]),h("button",{class:"collapse"})],-1)),s[136]||(s[136]=h("h3",{id:"_2、配置连接-redis-的参数",tabindex:"-1"},[h("strong",null,"2、配置连接 Redis 的参数"),k(),h("a",{class:"header-anchor",href:"#_2、配置连接-redis-的参数","aria-label":'Permalink to "**2、配置连接 Redis 的参数**"'},"​")],-1)),s[137]||(s[137]=h("p",null,"在 application 配置文件中配置连接 Redis 的参数。Spring Boot 基础就不介绍了，最新教程推荐看下面的教程。",-1)),s[138]||(s[138]=h("div",{style:{"max-height":"300px"},class:"language-properties vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"properties"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"spring.redis.host"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"=192.168.10.103")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"spring.redis.port"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"=6379")])])]),h("button",{class:"collapse"})],-1)),s[139]||(s[139]=h("h3",{id:"_3、创建与验证-token",tabindex:"-1"},[h("strong",null,"3、创建与验证 Token"),k(),h("a",{class:"header-anchor",href:"#_3、创建与验证-token","aria-label":'Permalink to "**3、创建与验证 Token**"'},"​")],-1)),s[140]||(s[140]=h("p",null,"创建用于操作 Token 相关的 Service 类，里面存在 Token 创建与验证方法，其中：",-1)),s[141]||(s[141]=h("ol",null,[h("li",null,[h("strong",null,"Token 创建方法："),k(" 使用 UUID 工具创建 Token 串，设置以 “order:token:“+“Token串” 作为 Key，以用户id当成 Value，将信息存入 Redis 中。")]),h("li",null,[h("strong",null,"Token 验证方法："),k(" 接收 Token 串参数，加上 Key 前缀形成 Key，再传入 value 值，执行 Lua 表达式（Lua 表达式能保证命令执行的原子性）进行查找对应 Key 与删除操作。执行完成后验证命令的返回结果，如果结果不为空且非0，则验证成功，否则失败。")])],-1)),s[142]||(s[142]=h("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"java"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"/**")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," * 订单确认页返回需要用到的数据")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," *")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," * "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"@return")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," */")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"@"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Override")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"public"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," OrderConfirmVo "),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"confirmOrder"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() throws ExecutionException, InterruptedException {")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ...")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    //todo 5、防重令牌")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    String token "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," UUID."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"randomUUID"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toString"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"replace"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-"'),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'""'),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    //给服务器一个令牌")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    redisTemplate."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"opsForValue"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(OrderConstant.USER_ORDER_TOKEN_PREFIX "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," \t\t             memberRespVo."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(), token, "),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"30"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", TimeUnit.MINUTES);")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    //给页面一个令牌")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    confirmVo."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setOrderToken"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(token);")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ...")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),h("button",{class:"collapse"})],-1)),s[143]||(s[143]=h("div",{style:{"max-height":"300px"},class:"language-java vp-adaptive-theme"},[h("button",{title:"Copy Code",class:"copy"}),h("span",{class:"lang"},"java"),h("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[h("code",{"v-pre":""},[h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"/**")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," * 下单")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," */")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"@"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Transactional")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"@"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Override")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"public"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," SubmitOrderResponseVo "),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"submitOrder"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(OrderSubmitVo vo) {")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ...")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    //1、验证令牌【令牌的对比和删除必须保证原子性】")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    //0令牌失败 - 1删除成功(校验成功)")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    String script "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),h("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\""),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    String orderToken "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," vo."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getOrderToken"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    //原子验证令牌和删除令牌")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    Long result "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," redisTemplate."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"execute"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                //脚本返回类型->0,1")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"                new"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DefaultRedisScript<"),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"Long"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">(script, Long.class),")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                //将缓存中将要比对的key转为集合")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                Arrays."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"asList"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(OrderConstant.USER_ORDER_TOKEN_PREFIX "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," memberRespVo."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getId"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()),")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                //传入要校验的值")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                orderToken);")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    if"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (result "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 0L"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        //验证失败，设置错误状态码为1，key过期等情况")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        responseVo."),h("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setCode"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),h("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        return"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," responseVo;")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    } "),h("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"else"),h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        //验证成功")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ...")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),k("\n"),h("span",{class:"line"},[h("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),h("button",{class:"collapse"})],-1)),s[144]||(s[144]=h("h2",{id:"八、最后总结",tabindex:"-1"},[k("八、最后总结 "),h("a",{class:"header-anchor",href:"#八、最后总结","aria-label":'Permalink to "八、最后总结"'},"​")],-1)),s[145]||(s[145]=h("ul",null,[h("li",null,"幂等性是开发当中很常见也很重要的一个需求，尤其是支付、订单等与金钱挂钩的服务，保证接口幂等性尤其重要。在实际开发中，我们需要针对不同的业务场景我们需要灵活的选择幂等性的实现方式：")],-1)),s[146]||(s[146]=h("ol",null,[h("li",null,"对于下单等存在唯一主键的，可以使用“唯一主键方案”的方式实现。"),h("li",null,"对于更新订单状态等相关的更新场景操作，使用“乐观锁方案”实现更为简单。"),h("li",null,"对于上下游这种，下游请求上游，上游服务可以使用“下游传递唯一序列号方案”更为合理。"),h("li",null,"类似于前端重复提交、重复下单、没有唯一ID号的场景，可以通过 Token 与 Redis 配合的“防重 Token 方案”实现更为快捷。")],-1)),s[147]||(s[147]=h("blockquote",null,[h("p",null,"上面只是给与一些建议，再次强调一下，实现幂等性需要先理解自身业务需求，根据业务逻辑来实现这样才合理，处理好其中的每一个结点细节，完善整体的业务流程设计，才能更好的保证系统的正常运行。最后做一个简单总结")],-1)),s[148]||(s[148]=h("blockquote",null,[h("p",null,"数据库唯一主键"),h("p",null,"插入操作 删除操作"),h("p",null,"简单"),h("p",null,"- 只能用于插入操作；- 只能用于存在唯一主键场景；")],-1)),s[149]||(s[149]=h("blockquote",null,[h("p",null,"数据库乐观锁"),h("p",null,"更新操作"),h("p",null,"简单"),h("p",null,"- 只能用于更新操作；- 表中需要额外添加字段；")],-1)),s[150]||(s[150]=h("blockquote",null,[h("p",null,"请求序列号"),h("p",null,"插入操作 更新操作 删除操作"),h("p",null,"简单"),h("p",null,"- 需要保证下游生成唯一序列号；- 需要 Redis 第三方存储已经请求的序列号；")],-1)),s[151]||(s[151]=h("blockquote",null,[h("p",null,"防重 Token 令牌"),h("p",null,"插入操作 更新操作 删除操作"),h("p",null,"适中"),h("p",null,"- 需要 Redis 第三方存储生成的 Token 串；")],-1))])),"main-header":e((()=>[t(i.$slots,"main-header")])),"main-header-after":e((()=>[t(i.$slots,"main-header-after")])),"main-nav":e((()=>[t(i.$slots,"main-nav")])),"main-content-before":e((()=>[t(i.$slots,"main-content-before")])),"main-content":e((()=>[t(i.$slots,"main-content")])),"main-content-after":e((()=>[t(i.$slots,"main-content-after")])),"main-nav-before":e((()=>[t(i.$slots,"main-nav-before")])),"main-nav-after":e((()=>[t(i.$slots,"main-nav-after")])),comment:e((()=>[t(i.$slots,"comment")])),footer:e((()=>[t(i.$slots,"footer")])),aside:e((()=>[t(i.$slots,"aside")])),"aside-custom":e((()=>[t(i.$slots,"aside-custom")])),default:e((()=>[t(i.$slots,"default")])),_:3},8,["frontmatter"])}}};export{E as default,d as usePageData};
